name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo
        ports:
          - 27017:27017
      redis:
        image: redis
        ports:
          - 6379:6379
          
    strategy:
      matrix:
        node-version: [16.x, 18.x]

    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd server && npm ci
        cd ../client && npm ci
        
    - name: Run linting
      run: |
        cd server && npm run lint
        cd ../client && npm run lint
        
    - name: Run tests
      run: |
        cd server && npm test
        cd ../client && npm test
      env:
        CI: true
        MONGO_URI: mongodb://localhost:27017/test
        JWT_SECRET: test-secret
        REDIS_URL: redis://localhost:6379

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build and push Docker images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/app-server:$IMAGE_TAG -f server/Dockerfile.prod ./server
        docker build -t $ECR_REGISTRY/app-client:$IMAGE_TAG -f client/Dockerfile.prod ./client
        docker push $ECR_REGISTRY/app-server:$IMAGE_TAG
        docker push $ECR_REGISTRY/app-client:$IMAGE_TAG
        
    - name: Update ECS service
      run: |
        aws ecs update-service --cluster production --service app-service --force-new-deployment
