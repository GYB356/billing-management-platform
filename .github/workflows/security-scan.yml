name: Security Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight

jobs:
  security:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: billing_platform_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: node scripts/setup-test-db.js
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/billing_platform_test

      - name: Run security tests
        run: |
          npm run test:security
          npm run test:load:security
          npm run test:load:auth
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/billing_platform_test
          NEXTAUTH_SECRET: test_secret
          NEXTAUTH_URL: http://localhost:3000

      - name: Run OWASP ZAP scan
        uses: zaproxy/action-full-scan@v0.4.0
        with:
          target: http://localhost:3000
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: reports/security/

      - name: Check for vulnerabilities
        run: npm audit
        continue-on-error: true

      - name: Check for outdated dependencies
        run: npm outdated
        continue-on-error: true

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'Billing Management Platform'
          path: '.'
          format: 'HTML'
          out: 'reports/dependency-check'
          args: >
            --suppression ./.zap/dependency-check-suppressions.xml
            --failOnCVSS 7
            --enableRetired

      - name: Upload dependency check report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: reports/dependency-check/
          retention-days: 14

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const issue = context.issue;
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            
            // Create issue comment
            github.rest.issues.createComment({
              owner: issue.owner,
              repo: issue.repo,
              issue_number: issue.number,
              body: `⚠️ Security scan failed. Please check the [security report](${runUrl}) for details.`
            });

            // Create security alert
            if (context.eventName === 'push' && context.ref === 'refs/heads/main') {
              github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: context.sha,
                state: 'failure',
                target_url: runUrl,
                description: 'Security scan failed',
                context: 'Security Scan'
              });
            } 