version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    image: secure-app:latest
    container_name: secure-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      # Uncomment and set these when ready for production
      # - RATE_LIMIT_WINDOW_MS=60000
      # - RATE_LIMIT_MAX_REQUESTS=60
      # - AUTH_RATE_LIMIT_WINDOW_MS=900000
      # - AUTH_RATE_LIMIT_MAX_REQUESTS=5
      # - CORS_ORIGIN=https://yourdomain.com
      # - SESSION_SECRET=your_secret_here
      # - JWT_SECRET=your_jwt_secret_here
    networks:
      - app-network
    # Healthcheck to verify the application is running properly
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Optional MongoDB service
  # mongo:
  #   image: mongo:6
  #   container_name: mongodb
  #   restart: unless-stopped
  #   environment:
  #     - MONGO_INITDB_ROOT_USERNAME=admin
  #     - MONGO_INITDB_ROOT_PASSWORD=password
  #     - MONGO_INITDB_DATABASE=secure-app
  #   volumes:
  #     - mongodb-data:/data/db
  #   networks:
  #     - app-network

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:

# Uncomment if using MongoDB
# volumes:
#   mongodb-data: