<<<<<<< HEAD
=======
import { normalizedAssetPrefix } from "../../../../../shared/lib/normalized-asset-prefix";
>>>>>>> 4f9d35bd5c5bf095848f6fc99f7e7bfe5212365f
function getSocketProtocol(assetPrefix) {
    let protocol = window.location.protocol;
    try {
        // assetPrefix is a url
        protocol = new URL(assetPrefix).protocol;
    } catch (e) {}
<<<<<<< HEAD
    return protocol === "http:" ? "ws" : "wss";
}
export function getSocketUrl(assetPrefix) {
    const { hostname, port } = window.location;
    const protocol = getSocketProtocol(assetPrefix);
    const normalizedAssetPrefix = assetPrefix.replace(/^\/+/, "");
    let url = protocol + "://" + hostname + ":" + port + (normalizedAssetPrefix ? "/" + normalizedAssetPrefix : "");
    if (normalizedAssetPrefix.startsWith("http")) {
        url = protocol + "://" + normalizedAssetPrefix.split("://", 2)[1];
    }
    return url;
=======
    return protocol === "http:" ? "ws:" : "wss:";
}
export function getSocketUrl(assetPrefix) {
    const prefix = normalizedAssetPrefix(assetPrefix);
    const protocol = getSocketProtocol(assetPrefix || "");
    if (URL.canParse(prefix)) {
        // since normalized asset prefix is ensured to be a URL format,
        // we can safely replace the protocol
        return prefix.replace(/^http/, "ws");
    }
    const { hostname, port } = window.location;
    return protocol + "//" + hostname + (port ? ":" + port : "") + prefix;
>>>>>>> 4f9d35bd5c5bf095848f6fc99f7e7bfe5212365f
}

//# sourceMappingURL=get-socket-url.js.map