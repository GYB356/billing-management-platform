
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  role: 'role'
};

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  stripeCustomerId: 'stripeCustomerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  stripeCustomerId: 'stripeCustomerId',
  name: 'name',
  email: 'email',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  status: 'status',
  planId: 'planId',
  stripeSubscriptionId: 'stripeSubscriptionId',
  currentPeriodStart: 'currentPeriodStart',
  currentPeriodEnd: 'currentPeriodEnd',
  cancelAtPeriodEnd: 'cancelAtPeriodEnd',
  cancelledAt: 'cancelledAt',
  pausedAt: 'pausedAt',
  resumesAt: 'resumesAt',
  trialEndsAt: 'trialEndsAt',
  billingCycleAnchor: 'billingCycleAnchor',
  proration: 'proration',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  basePrice: 'basePrice',
  currentPrice: 'currentPrice',
  currency: 'currency',
  interval: 'interval',
  stripePriceId: 'stripePriceId',
  isActive: 'isActive',
  sortOrder: 'sortOrder',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  marketSegment: 'marketSegment',
  costBasis: 'costBasis',
  churnRisk: 'churnRisk'
};

exports.Prisma.PlanFeatureScalarFieldEnum = {
  id: 'id',
  planId: 'planId',
  name: 'name',
  description: 'description',
  included: 'included',
  value: 'value',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UsageLimitScalarFieldEnum = {
  id: 'id',
  planId: 'planId',
  featureKey: 'featureKey',
  limit: 'limit',
  interval: 'interval',
  overage: 'overage',
  overagePrice: 'overagePrice',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  stripeInvoiceId: 'stripeInvoiceId',
  pdfUrl: 'pdfUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UsageRecordScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  featureKey: 'featureKey',
  quantity: 'quantity',
  timestamp: 'timestamp',
  billingPeriodStart: 'billingPeriodStart',
  billingPeriodEnd: 'billingPeriodEnd',
  processed: 'processed',
  metadata: 'metadata'
};

exports.Prisma.ReportScalarFieldEnum = {
  id: 'id',
  type: 'type',
  format: 'format',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy',
  downloadUrl: 'downloadUrl',
  metadata: 'metadata'
};

exports.Prisma.MetricScalarFieldEnum = {
  id: 'id',
  name: 'name',
  value: 'value',
  tags: 'tags',
  timestamp: 'timestamp',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmailNotificationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  status: 'status',
  to: 'to',
  subject: 'subject',
  body: 'body',
  sentAt: 'sentAt',
  createdAt: 'createdAt',
  metadata: 'metadata'
};

exports.Prisma.WebhookScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  url: 'url',
  secret: 'secret',
  events: 'events',
  status: 'status',
  retryConfig: 'retryConfig',
  lastSuccess: 'lastSuccess',
  lastFailure: 'lastFailure',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WebhookDeliveryScalarFieldEnum = {
  id: 'id',
  webhookId: 'webhookId',
  payload: 'payload',
  status: 'status',
  statusCode: 'statusCode',
  response: 'response',
  error: 'error',
  retries: 'retries',
  createdAt: 'createdAt'
};

exports.Prisma.RefreshTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  userId: 'userId',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  stripePaymentId: 'stripePaymentId',
  userId: 'userId',
  customerId: 'customerId',
  subscriptionId: 'subscriptionId',
  orderId: 'orderId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FinancingOfferScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  currency: 'currency',
  provider: 'provider',
  customerId: 'customerId',
  status: 'status',
  offerId: 'offerId',
  terms: 'terms',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CarbonEstimateScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  amount: 'amount',
  unit: 'unit',
  source: 'source',
  category: 'category',
  timestamp: 'timestamp',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BillingRuleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  conditions: 'conditions',
  actions: 'actions',
  priority: 'priority',
  isActive: 'isActive',
  organizationId: 'organizationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BillingRuleTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  conditions: 'conditions',
  actions: 'actions',
  isDefault: 'isDefault',
  organizationId: 'organizationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  customerId: 'customerId',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PriceHistoryScalarFieldEnum = {
  id: 'id',
  planId: 'planId',
  price: 'price',
  effectiveFrom: 'effectiveFrom',
  effectiveTo: 'effectiveTo',
  reason: 'reason',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.PriceTestScalarFieldEnum = {
  id: 'id',
  planId: 'planId',
  name: 'name',
  description: 'description',
  startDate: 'startDate',
  endDate: 'endDate',
  status: 'status',
  targetMetric: 'targetMetric',
  minConfidence: 'minConfidence',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PriceTestVariantScalarFieldEnum = {
  id: 'id',
  testId: 'testId',
  price: 'price',
  name: 'name',
  description: 'description',
  conversionRate: 'conversionRate',
  revenue: 'revenue',
  subscribers: 'subscribers',
  isControl: 'isControl',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MarketBenchmarkScalarFieldEnum = {
  id: 'id',
  segment: 'segment',
  productType: 'productType',
  avgPrice: 'avgPrice',
  medianPrice: 'medianPrice',
  minPrice: 'minPrice',
  maxPrice: 'maxPrice',
  sampleSize: 'sampleSize',
  source: 'source',
  collectedAt: 'collectedAt',
  metadata: 'metadata'
};

exports.Prisma.RevenueRecognitionRuleScalarFieldEnum = {
  id: 'id',
  planId: 'planId',
  type: 'type',
  deferralPeriod: 'deferralPeriod',
  conditions: 'conditions',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RevenueLedgerScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  amount: 'amount',
  currency: 'currency',
  recognizedDate: 'recognizedDate',
  deferredAmount: 'deferredAmount',
  deferredUntil: 'deferredUntil',
  type: 'type',
  status: 'status',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChurnPredictionScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  probability: 'probability',
  factors: 'factors',
  nextBillDate: 'nextBillDate',
  predictedDate: 'predictedDate',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CohortAnalysisScalarFieldEnum = {
  id: 'id',
  cohortDate: 'cohortDate',
  cohortSize: 'cohortSize',
  metric: 'metric',
  values: 'values',
  segment: 'segment',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ForecastModelScalarFieldEnum = {
  id: 'id',
  name: 'name',
  config: 'config',
  metadata: 'metadata',
  status: 'status',
  createdAt: 'createdAt',
  lastTraining: 'lastTraining',
  metrics: 'metrics'
};

exports.Prisma.TimeSeriesDataScalarFieldEnum = {
  id: 'id',
  timestamp: 'timestamp',
  value: 'value',
  metadata: 'metadata',
  modelId: 'modelId'
};

exports.Prisma.ForecastResultScalarFieldEnum = {
  id: 'id',
  timestamp: 'timestamp',
  value: 'value',
  lowerBound: 'lowerBound',
  upperBound: 'upperBound',
  confidence: 'confidence',
  metadata: 'metadata',
  modelId: 'modelId'
};

exports.Prisma.MarketTrendScalarFieldEnum = {
  id: 'id',
  timestamp: 'timestamp',
  trend: 'trend',
  seasonality: 'seasonality',
  metadata: 'metadata'
};

exports.Prisma.PredictionIntervalScalarFieldEnum = {
  id: 'id',
  timestamp: 'timestamp',
  lowerBound: 'lowerBound',
  upperBound: 'upperBound',
  confidence: 'confidence',
  metadata: 'metadata'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  organizationId: 'organizationId',
  type: 'type',
  message: 'message',
  read: 'read',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ApiKeyScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  name: 'name',
  key: 'key',
  lastUsed: 'lastUsed',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TaxCalculationScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  amount: 'amount',
  taxRate: 'taxRate',
  taxAmount: 'taxAmount',
  country: 'country',
  state: 'state',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AlertScalarFieldEnum = {
  id: 'id',
  type: 'type',
  message: 'message',
  severity: 'severity',
  metadata: 'metadata',
  resolved: 'resolved',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TaxRateScalarFieldEnum = {
  id: 'id',
  countryCode: 'countryCode',
  stateCode: 'stateCode',
  name: 'name',
  rate: 'rate',
  isActive: 'isActive',
  isEU: 'isEU',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BillScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  description: 'description',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  type: 'type',
  status: 'status',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RetryAttemptScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  userId: 'userId',
  attempts: 'attempts',
  lastAttemptAt: 'lastAttemptAt',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  ACTIVE: 'ACTIVE',
  TRIALING: 'TRIALING',
  PAST_DUE: 'PAST_DUE',
  CANCELED: 'CANCELED',
  PAUSED: 'PAUSED',
  INCOMPLETE: 'INCOMPLETE',
  INCOMPLETE_EXPIRED: 'INCOMPLETE_EXPIRED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Organization: 'Organization',
  Customer: 'Customer',
  Subscription: 'Subscription',
  Plan: 'Plan',
  PlanFeature: 'PlanFeature',
  UsageLimit: 'UsageLimit',
  Invoice: 'Invoice',
  UsageRecord: 'UsageRecord',
  Report: 'Report',
  Metric: 'Metric',
  EmailNotification: 'EmailNotification',
  Webhook: 'Webhook',
  WebhookDelivery: 'WebhookDelivery',
  RefreshToken: 'RefreshToken',
  Payment: 'Payment',
  FinancingOffer: 'FinancingOffer',
  CarbonEstimate: 'CarbonEstimate',
  BillingRule: 'BillingRule',
  BillingRuleTemplate: 'BillingRuleTemplate',
  Order: 'Order',
  PriceHistory: 'PriceHistory',
  PriceTest: 'PriceTest',
  PriceTestVariant: 'PriceTestVariant',
  MarketBenchmark: 'MarketBenchmark',
  RevenueRecognitionRule: 'RevenueRecognitionRule',
  RevenueLedger: 'RevenueLedger',
  ChurnPrediction: 'ChurnPrediction',
  CohortAnalysis: 'CohortAnalysis',
  ForecastModel: 'ForecastModel',
  TimeSeriesData: 'TimeSeriesData',
  ForecastResult: 'ForecastResult',
  MarketTrend: 'MarketTrend',
  PredictionInterval: 'PredictionInterval',
  Notification: 'Notification',
  ApiKey: 'ApiKey',
  TaxCalculation: 'TaxCalculation',
  Alert: 'Alert',
  TaxRate: 'TaxRate',
  Bill: 'Bill',
  Transaction: 'Transaction',
  RetryAttempt: 'RetryAttempt'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
