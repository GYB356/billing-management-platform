// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Existing models
model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  password      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  notifications Notification[]
  role          String         @default("user")
  refreshTokens RefreshToken[]
  payments      Payment[]
  retryAttempts RetryAttempt[]
  // ...existing fields...

  @@index([email])
}

// New models added for billing platform
model Organization {
  id               String                @id @default(cuid())
  name             String
  email            String?
  stripeCustomerId String?
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  notifications    Notification[]
  webhooks         Webhook[]
  apiKeys          ApiKey[]
  carbonEstimates  CarbonEstimate[]
  billingRules     BillingRule[]
  billingTemplates BillingRuleTemplate[]
  orders           Order[]

  @@index([email])
}

model Customer {
  id               String           @id @default(cuid())
  userId           String
  stripeCustomerId String?          @unique
  name             String?
  email            String
  payments         Payment[]
  subscription     Subscription?
  taxCalculations  TaxCalculation[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  orders           Order[]

  @@index([userId])
}

enum SubscriptionStatus {
  ACTIVE
  TRIALING
  PAST_DUE
  CANCELED
  PAUSED
  INCOMPLETE
  INCOMPLETE_EXPIRED
}

model Subscription {
  id                   String             @id @default(cuid())
  customerId           String             @unique
  customer             Customer           @relation(fields: [customerId], references: [id])
  status               SubscriptionStatus
  planId               String
  plan                 Plan               @relation(fields: [planId], references: [id])
  stripeSubscriptionId String?            @unique
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean            @default(false)
  cancelledAt          DateTime?
  pausedAt             DateTime?
  resumesAt            DateTime?
  trialEndsAt          DateTime?
  payments             Payment[]
  usageRecords         UsageRecord[]
  billingCycleAnchor   DateTime
  proration            Json?
  metadata             Json?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  @@index([customerId])
}

model Plan {
  id            String                   @id @default(cuid())
  name          String
  description   String?
  basePrice     Float // Base price before dynamic adjustments
  currentPrice  Float // Current active price
  currency      String                   @default("USD")
  interval      String                   @default("month")
  stripePriceId String?
  isActive      Boolean                  @default(true)
  features      PlanFeature[]
  usageLimits   UsageLimit[]
  sortOrder     Int                      @default(0)
  metadata      Json?
  priceHistory  PriceHistory[]
  priceTests    PriceTest[]
  revenueRules  RevenueRecognitionRule[]
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  subscriptions Subscription[]
  marketSegment String? // For segment-based pricing
  costBasis     Float? // For margin calculations
  churnRisk     Float? // Predicted churn probability
}

model PlanFeature {
  id          String   @id @default(cuid())
  planId      String
  plan        Plan     @relation(fields: [planId], references: [id])
  name        String
  description String?
  included    Boolean  @default(true)
  value       String?
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([planId])
}

model UsageLimit {
  id           String   @id @default(cuid())
  planId       String
  plan         Plan     @relation(fields: [planId], references: [id])
  featureKey   String
  limit        Float
  interval     String   @default("month")
  overage      Boolean  @default(false)
  overagePrice Float?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([planId])
  @@index([featureKey])
}

model Invoice {
  id              String   @id @default(cuid())
  organizationId  String
  amount          Float
  currency        String   @default("USD")
  status          String
  stripeInvoiceId String?
  pdfUrl          String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  // ...relationships...
}

model UsageRecord {
  id                 String       @id @default(cuid())
  subscriptionId     String
  subscription       Subscription @relation(fields: [subscriptionId], references: [id])
  featureKey         String
  quantity           Float
  timestamp          DateTime     @default(now())
  billingPeriodStart DateTime
  billingPeriodEnd   DateTime
  processed          Boolean      @default(false)
  metadata           Json?

  @@index([subscriptionId])
  @@index([featureKey])
  @@index([billingPeriodStart, billingPeriodEnd])
}

model Report {
  id          String   @id @default(cuid())
  type        String
  format      String
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  downloadUrl String?
  metadata    Json?
}

model Metric {
  id        String   @id @default(cuid())
  name      String
  value     Float
  tags      Json?
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([timestamp])
}

model EmailNotification {
  id        String    @id @default(cuid())
  type      String
  status    String
  to        String
  subject   String
  body      String
  sentAt    DateTime?
  createdAt DateTime  @default(now())
  metadata  Json?
}

model Webhook {
  id             String            @id @default(cuid())
  organizationId String
  organization   Organization      @relation(fields: [organizationId], references: [id])
  url            String
  secret         String
  events         String[]
  status         String            @default("ACTIVE")
  retryConfig    Json
  lastSuccess    DateTime?
  lastFailure    DateTime?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  deliveries     WebhookDelivery[]

  @@index([organizationId])
}

model WebhookDelivery {
  id         String   @id @default(cuid())
  webhookId  String
  webhook    Webhook  @relation(fields: [webhookId], references: [id])
  payload    Json
  status     String
  statusCode Int?
  response   String?
  error      String?
  retries    Int      @default(0)
  createdAt  DateTime @default(now())

  @@index([webhookId])
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([expiresAt])
}

model Payment {
  id              String        @id @default(cuid())
  amount          Float
  currency        String        @default("usd")
  status          String
  stripePaymentId String        @unique
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  customer        Customer?     @relation(fields: [customerId], references: [id])
  customerId      String?
  subscription    Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId  String?
  order           Order?        @relation(fields: [orderId], references: [id])
  orderId         String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([userId])
  @@index([customerId])
  @@index([subscriptionId])
  @@index([orderId])
}

model FinancingOffer {
  id         String   @id @default(cuid())
  amount     Float
  currency   String
  provider   String // 'stripe_capital', 'finbox', 'rutter'
  customerId String
  status     String
  offerId    String
  terms      Json
  metadata   Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model CarbonEstimate {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  amount         Float
  unit           String // e.g., "kgCO2e"
  source         String // e.g., "patch", "internal"
  category       String // e.g., "compute", "storage", "network"
  timestamp      DateTime     @default(now())
  metadata       Json?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([organizationId])
  @@index([category])
}

model BillingRule {
  id             String       @id @default(cuid())
  name           String
  description    String?
  type           String // BANDWIDTH, TIME_BASED, EVENT_BASED, HYBRID
  conditions     Json[] // Array of billing conditions
  actions        Json[] // Array of billing actions
  priority       Int          @default(0)
  isActive       Boolean      @default(true)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([organizationId])
}

model BillingRuleTemplate {
  id             String       @id @default(cuid())
  name           String
  description    String?
  type           String // BANDWIDTH, TIME_BASED, EVENT_BASED, HYBRID
  conditions     Json[] // Default conditions
  actions        Json[] // Default actions
  isDefault      Boolean      @default(false)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([organizationId])
}

model Order {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  customerId     String
  customer       Customer     @relation(fields: [customerId], references: [id])
  amount         Float
  currency       String
  status         String // PENDING, PROCESSING, COMPLETED, FAILED
  metadata       Json?
  payments       Payment[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([organizationId])
  @@index([customerId])
  @@index([status])
}

model PriceHistory {
  id            String    @id @default(cuid())
  planId        String
  plan          Plan      @relation(fields: [planId], references: [id])
  price         Float
  effectiveFrom DateTime
  effectiveTo   DateTime?
  reason        String? // e.g. "market_adjustment", "test_result", "seasonal"
  metadata      Json?
  createdAt     DateTime  @default(now())

  @@index([planId])
}

model PriceTest {
  id            String             @id @default(cuid())
  planId        String
  plan          Plan               @relation(fields: [planId], references: [id])
  name          String
  description   String?
  startDate     DateTime
  endDate       DateTime?
  status        String // PLANNED, ACTIVE, COMPLETED, CANCELLED
  variants      PriceTestVariant[]
  targetMetric  String // e.g. "conversion_rate", "revenue", "ltv"
  minConfidence Float // Required confidence level
  metadata      Json?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  @@index([planId])
}

model PriceTestVariant {
  id             String    @id @default(cuid())
  testId         String
  test           PriceTest @relation(fields: [testId], references: [id])
  price          Float
  name           String
  description    String?
  conversionRate Float?
  revenue        Float?
  subscribers    Int       @default(0)
  isControl      Boolean   @default(false)
  metadata       Json?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([testId])
}

model MarketBenchmark {
  id          String   @id @default(cuid())
  segment     String
  productType String
  avgPrice    Float
  medianPrice Float
  minPrice    Float
  maxPrice    Float
  sampleSize  Int
  source      String
  collectedAt DateTime @default(now())
  metadata    Json?

  @@index([segment, productType])
}

model RevenueRecognitionRule {
  id             String   @id @default(cuid())
  planId         String
  plan           Plan     @relation(fields: [planId], references: [id])
  type           String // IMMEDIATE, STRAIGHT_LINE, USAGE_BASED, MILESTONE
  deferralPeriod Int? // Days to defer revenue
  conditions     Json? // Conditions for recognition
  metadata       Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([planId])
}

model RevenueLedger {
  id             String    @id @default(cuid())
  subscriptionId String
  amount         Float
  currency       String
  recognizedDate DateTime
  deferredAmount Float?
  deferredUntil  DateTime?
  type           String // RECURRING, USAGE, ONE_TIME
  status         String // PENDING, RECOGNIZED, DEFERRED
  metadata       Json?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([subscriptionId])
  @@index([recognizedDate])
}

model ChurnPrediction {
  id             String   @id @default(cuid())
  subscriptionId String
  probability    Float // 0-1 probability of churning
  factors        Json // Contributing factors
  nextBillDate   DateTime
  predictedDate  DateTime @default(now())
  metadata       Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([subscriptionId])
  @@index([probability])
}

model CohortAnalysis {
  id         String   @id @default(cuid())
  cohortDate DateTime
  cohortSize Int
  metric     String // MRR, Churn, LTV, etc.
  values     Json // Time series data
  segment    String?
  metadata   Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([cohortDate])
  @@index([metric])
}

model ForecastModel {
  id             String           @id @default(uuid())
  name           String
  config         Json
  metadata       Json?
  status         String // initializing, trained, error
  createdAt      DateTime         @default(now())
  lastTraining   DateTime?
  metrics        Json?
  forecasts      ForecastResult[]
  timeSeriesData TimeSeriesData[]
}

model TimeSeriesData {
  id        String        @id @default(uuid())
  timestamp DateTime
  value     Float
  metadata  Json?
  modelId   String
  model     ForecastModel @relation(fields: [modelId], references: [id])
}

model ForecastResult {
  id         String        @id @default(uuid())
  timestamp  DateTime
  value      Float
  lowerBound Float?
  upperBound Float?
  confidence Float?
  metadata   Json?
  modelId    String
  model      ForecastModel @relation(fields: [modelId], references: [id])
}

model MarketTrend {
  id          String   @id @default(uuid())
  timestamp   DateTime
  trend       Float
  seasonality Float?
  metadata    Json?
}

model PredictionInterval {
  id         String   @id @default(uuid())
  timestamp  DateTime
  lowerBound Float
  upperBound Float
  confidence Float
  metadata   Json?
}

model Notification {
  id             String       @id @default(cuid())
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  type           String
  message        String
  read           Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([userId])
  @@index([organizationId])
}

model ApiKey {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  name           String
  key            String       @unique
  lastUsed       DateTime?
  expiresAt      DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([organizationId])
}

model TaxCalculation {
  id         String   @id @default(cuid())
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])
  amount     Float
  taxRate    Float
  taxAmount  Float
  country    String
  state      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([customerId])
}

model Alert {
  id        String   @id @default(cuid())
  type      String
  message   String
  severity  String
  metadata  Json?
  resolved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type])
  @@index([severity])
  @@index([resolved])
  @@index([createdAt])
}

model TaxRate {
  id          String   @id @default(uuid())
  countryCode String   @db.VarChar(2)
  stateCode   String?  @db.VarChar(3)
  name        String   @db.VarChar(100)
  rate        Decimal  @db.Decimal(5, 4)
  isActive    Boolean  @default(true)
  isEU        Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([countryCode, stateCode])
  @@index([isEU, isActive])
}

model Bill {
  id          String   @id @default(cuid())
  amount      Float
  description String
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Transaction {
  id        String   @id @default(cuid())
  amount    Float
  type      String
  status    String
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RetryAttempt {
  id            String   @id @default(cuid())
  invoiceId     String   @unique
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  attempts      Int      @default(0)
  lastAttemptAt DateTime @default(now())
  status        String // pending, succeeded, failed
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
  @@index([status])
}

model RetryLog {
  id        String   @id @default(cuid())
  invoiceId String
  userId    String
  status    String
  attempts  Int
  createdAt DateTime @default(now())

  @@index([invoiceId])
  @@index([userId])
}

// Additional models can be added here
