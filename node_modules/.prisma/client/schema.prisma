generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String               @id @default(cuid())
  name                 String?
  email                String               @unique
  emailVerified        DateTime?
  image                String?
  password             String?
  role                 UserRole             @default(USER)
  status               UserStatus           @default(ACTIVE)
  twoFactorEnabled     Boolean              @default(false)
  twoFactorSecret      String?
  backupCodes          String[]             @default([])
  lastLoginAt          DateTime?
  lastPasswordChange   DateTime?
  failedLoginAttempts  Int                  @default(0)
  lockedUntil          DateTime?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  userOrganizations    UserOrganization[]
  accounts             Account[]
  sessions             Session[]
  notifications        Notification[]
  preferences2         UserPreferences[]
  usageRecords         UsageRecord[]
  taxRateHistory       TaxRateHistory[]
  events               Event[]
  communicationPrefs   CommunicationPrefs?  @relation(fields: [communicationPrefsId], references: [id])
  invoices             Invoice[]
  subscriptions        Subscription[]
  dataPrivacyRequests  DataPrivacyRequest[]
  userPreference       UserPreference?      @relation("UserToPreference")
  communicationPrefsId String?
  CreditAdjustment     CreditAdjustment[]
  BillingAuditLog      BillingAuditLog[]

  @@index([email])
  @@map("users")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  STAFF
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

// NextAuth required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id                String   @id @default(cuid())
  sessionToken      String   @unique
  userId            String
  expires           DateTime
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  twoFactorVerified Boolean  @default(false)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Organization model
model Organization {
  id                String                @id @default(cuid())
  name              String
  email             String?               @unique
  phone             String?
  address           String?
  city              String?
  state             String?
  country           String?
  postalCode        String?
  taxId             String?
  settings          Json?                 @default("{}")
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  stripeCustomerId  String?               @unique
  userOrganizations UserOrganization[]
  subscriptions     Subscription[]
  invoices          Invoice[]
  taxRates          TaxRate[]
  taxExemptions     TaxExemption[]
  customers         Customer[]
  notifications     Notification[]
  usageRecords      UsageRecord[]
  taxReportCache    TaxReportCache[]
  oneTimePayments   OneTimePayment[]
  webhookEndpoints  WebhookEndpoint[]
  events            Event[]
  orgSettings       OrganizationSettings?
  dunningConfigs    DunningConfig[]
  creditNotes       CreditNote[]
  creditAdjustments CreditAdjustment[]
  winBackCampaigns  WinBackCampaign[]
  scheduledEmails   ScheduledEmail[]
  taxRules          TaxRule[]

  @@map("organizations")
}

model UserOrganization {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([userId, organizationId])
  @@map("user_organizations")
}

enum OrganizationRole {
  OWNER
  ADMIN
  MEMBER
}

// Products and pricing
model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  metadata    Json?    @default("{}")
  stripeId    String?  @unique

  @@map("products")
}

// Pricing models
model PricingPlan {
  id              String   @id @default(cuid())
  name            String
  description     String?
  pricingType     String   @default("flat") // flat, per_user, tiered, usage_based
  basePrice       Int      @default(0) // Price in cents
  currency        String   @default("USD")
  billingInterval String   @default("monthly") // monthly, quarterly, annual, custom
  trialDays       Int      @default(0)
  sortOrder       Int      @default(0)
  isActive        Boolean  @default(true)
  isPublic        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  tiers            PricingTier[]
  planFeatures     PlanFeatureAssociation[]
  subscriptions    Subscription[]
  promotionPlans   PromotionPlan[]
  pricingRules     PricingRule[]
  currencyRelation Currency?                @relation(fields: [currency], references: [code])
}

model PricingTier {
  id         String  @id @default(cuid())
  planId     String
  upTo       Int? // null means unlimited
  price      Int? // Price in cents
  flatFee    Int? // Flat fee in cents
  perUnitFee Int? // Per unit fee in cents
  infinite   Boolean @default(false) // Whether this tier has no upper limit

  // Relations
  plan PricingPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
}

model PlanFeature {
  id            String   @id @default(cuid())
  name          String
  description   String?
  unitName      String? // For metered features (e.g., "users", "API calls")
  isHighlighted Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  promotionFeatures PromotionFeature[]
  usageTiers        UsageTier[]
}

model FeatureCategory {
  id          String   @id @default(cuid())
  name        String
  description String?
  code        String   @unique
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  features Feature[]

  @@index([code])
  @@map("feature_categories")
}

model Feature {
  id            String                   @id @default(uuid())
  name          String
  code          String                   @unique
  description   String?
  unitLabel     String? // e.g. "API calls", "GB", "users"
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  pricingRules  PricingRule[]
  usageRecords  UsageRecord[]
  usageCharges  UsageCharge[]
  usageLimits   UsageLimit[]
  category      FeatureCategory?         @relation(fields: [categoryId], references: [id])
  categoryId    String?
  planFeatures  PlanFeatureAssociation[]
  notifications UsageNotification[]
  usageAlerts   UsageAlert[]

  @@index([categoryId])
}

model PlanFeatureAssociation {
  id        String @id @default(cuid())
  planId    String
  featureId String
  limits    Json?  @default("{}") // Store limits as JSON with structure like {maxValue: number, action: string}

  // Relations
  plan    PricingPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  feature Feature     @relation(fields: [featureId], references: [id], onDelete: Cascade)

  // Indexes
  @@unique([planId, featureId])
}

model PricingPromotion {
  id             String    @id @default(cuid())
  code           String    @unique
  name           String
  description    String?
  discountType   String    @default("percentage") // percentage, fixed, free_trial
  discountValue  Int // Percentage or amount in cents
  maxRedemptions Int? // null for unlimited
  timesRedeemed  Int       @default(0)
  startDate      DateTime?
  endDate        DateTime?
  isActive       Boolean   @default(true)
  isStackable    Boolean   @default(false) // Whether can be combined with other promotions
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  promotionPlans    PromotionPlan[]
  promotionFeatures PromotionFeature[]
  redemptions       PromotionRedemption[]
}

model PromotionPlan {
  id          String @id @default(cuid())
  promotionId String
  planId      String

  // Relations
  promotion PricingPromotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  plan      PricingPlan      @relation(fields: [planId], references: [id], onDelete: Cascade)

  // Indexes
  @@unique([promotionId, planId])
}

model PromotionFeature {
  id          String @id @default(cuid())
  promotionId String
  featureId   String

  // Relations
  promotion PricingPromotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  feature   PlanFeature      @relation(fields: [featureId], references: [id], onDelete: Cascade)

  // Indexes
  @@unique([promotionId, featureId])
}

model PromotionRedemption {
  id             String   @id @default(cuid())
  promotionId    String
  subscriptionId String
  redeemedAt     DateTime @default(now())
  metadata       Json?    @default("{}")

  // Relations
  promotion    PricingPromotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  subscription Subscription     @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@unique([promotionId, subscriptionId])
  @@index([promotionId])
  @@index([subscriptionId])
  @@map("promotion_redemptions")
}

model Customer {
  id                String             @id @default(cuid())
  organizationId    String
  name              String
  email             String?
  phone             String?
  address           String?
  city              String?
  state             String?
  country           String?
  postalCode        String?
  taxId             String?
  organization      Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invoices          Invoice[]
  taxExemptions     TaxExemption[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  usageRecords      UsageRecord[]
  usageLimits       UsageLimit[]
  dunningLogs       DunningLog[]
  preferredCurrency String?
  currency          Currency?          @relation(fields: [preferredCurrency], references: [code])
  preferredLocale   String?
  locale            Locale?            @relation(fields: [preferredLocale], references: [code])
  creditBalance     Int                @default(0)
  creditAdjustments CreditAdjustment[]

  @@unique([organizationId, email])
  @@map("customers")
}

model Subscription {
  id                   String             @id @default(cuid())
  organizationId       String
  planId               String
  status               SubscriptionStatus @default(ACTIVE)
  quantity             Int                @default(1)
  startDate            DateTime           @default(now())
  endDate              DateTime?
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  trialEndsAt          DateTime?
  cancelAtPeriodEnd    Boolean            @default(false)
  canceledAt           DateTime?
  cancellationReason   String?
  isPaused             Boolean            @default(false)
  pausedAt             DateTime?
  resumesAt            DateTime?
  pauseReason          String?
  lastBillingDate      DateTime?
  nextBillingDate      DateTime?
  stripeSubscriptionId String?            @unique
  stripeCustomerId     String?
  metadata             Json?              @default("{}")
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  couponId             String?
  coupon               Coupon?            @relation(fields: [couponId], references: [id])
  currency             String             @default("USD")
  currencyRelation     Currency?          @relation(fields: [currency], references: [code])
  isSuspended          Boolean            @default(false)
  suspendedAt          DateTime?

  // Relations
  organization                     Organization                       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  plan                             PricingPlan                        @relation(fields: [planId], references: [id])
  promotionRedemptions             PromotionRedemption[]
  pauseHistory                     PauseHistory[]
  usageRecords                     UsageRecord[]
  usageNotifications               UsageNotification[]
  usageCharges                     UsageCharge[]
  dunningLogs                      DunningLog[]
  paymentAttempts                  PaymentAttempt[]
  User                             User?                              @relation(fields: [userId], references: [id])
  userId                           String?
  SubscriptionCancellationFeedback SubscriptionCancellationFeedback[]
  WinBackCampaign                  WinBackCampaign[]
  usageAlerts                      UsageAlert[]

  @@index([organizationId])
  @@index([status])
  @@map("subscriptions")
}

enum SubscriptionStatus {
  ACTIVE
  PAUSED
  TRIALING
  PAST_DUE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  UNPAID
  ENDED
}

model PauseHistory {
  id             String       @id @default(cuid())
  subscriptionId String
  pausedAt       DateTime     @default(now())
  resumesAt      DateTime
  resumedAt      DateTime?
  reason         String?
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())

  @@index([subscriptionId])
  @@map("pause_history")
}

model Invoice {
  id                String             @id @default(cuid())
  organizationId    String
  customerId        String
  number            String
  status            String
  dueDate           DateTime
  subtotal          Float
  total             Float
  organization      Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  customer          Customer           @relation(fields: [customerId], references: [id], onDelete: Cascade)
  taxes             InvoiceTax[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  dunningLogs       DunningLog[]
  paymentAttempts   PaymentAttempt[]
  currency          String             @default("USD")
  currencyRelation  Currency?          @relation(fields: [currency], references: [code])
  exchangeRate      Float? // Exchange rate at the time of invoice creation
  lastPaymentError  String?
  metadata          Json? // For storing localization and currency information
  userId            String?
  user              User?              @relation(fields: [userId], references: [id])
  creditNotes       CreditNote[]
  creditAdjustments CreditAdjustment[]
  invoiceTaxRates   InvoiceTaxRate[]

  @@unique([organizationId, number])
  @@map("invoices")
}

model TaxRateHistory {
  id            String   @id @default(cuid())
  taxRateId     String
  name          String
  rate          Float
  country       String
  state         String?
  city          String?
  description   String?
  isActive      Boolean  @default(true)
  changedBy     String
  changedAt     DateTime @default(now())
  reason        String?
  taxRate       TaxRate  @relation(fields: [taxRateId], references: [id], onDelete: Cascade)
  changedByUser User?    @relation(fields: [changedBy], references: [id])

  @@index([taxRateId])
  @@index([changedAt])
}

model InvoiceTax {
  id        String   @id @default(cuid())
  invoiceId String
  taxRateId String
  amount    Float
  isExempt  Boolean  @default(false)
  invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  taxRate   TaxRate  @relation(fields: [taxRateId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([invoiceId, taxRateId])
  @@map("invoice_taxes")
}

model SubscriptionPlan {
  id            String   @id @default(cuid())
  name          String
  description   String
  price         Float
  interval      String // 'month' or 'year'
  features      String[]
  stripePriceId String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Notifications
model Notification {
  id             String           @id @default(cuid())
  userId         String?
  organizationId String?
  title          String
  message        String
  type           NotificationType
  read           Boolean          @default(false)
  data           Json?            @default("{}")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  user           User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization?    @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([organizationId])
  @@index([read])
  @@index([createdAt])
  @@map("notifications")
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}

// Webhook processing
model ProcessedWebhookEvent {
  eventId     String   @id
  eventType   String
  processedAt DateTime @default(now())

  @@index([eventType])
  @@index([processedAt])
  @@map("processed_webhook_events")
}

// Promotional pricing and discount management
model Promotion {
  id              String       @id @default(cuid())
  name            String
  description     String?
  discountType    DiscountType
  discountAmount  Int // Percentage or fixed amount in cents
  currency        String       @default("USD")
  active          Boolean      @default(true)
  startDate       DateTime     @default(now())
  endDate         DateTime?
  maxRedemptions  Int?
  redemptionCount Int          @default(0)
  applicablePlans String[] // Array of plan IDs this promotion applies to
  stripeId        String?      @unique
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  metadata        Json?        @default("{}")
  coupons         Coupon[]

  @@index([active])
  @@index([startDate, endDate])
  @@map("promotions")
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

model Coupon {
  id              String         @id @default(uuid())
  code            String         @unique
  description     String?
  discountType    String // 'percentage', 'fixed_amount'
  discountAmount  Float // Either percentage or fixed amount
  currency        String? // Required for fixed_amount
  maxRedemptions  Int? // Maximum number of redemptions
  redemptionCount Int            @default(0)
  startsAt        DateTime       @default(now())
  expiresAt       DateTime?
  metadata        String?        @db.Text // JSON string for additional metadata
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  subscriptions   Subscription[] // Subscriptions that have applied this coupon
  Promotion       Promotion?     @relation(fields: [promotionId], references: [id])
  promotionId     String?

  @@index([code])
  @@map("coupons")
}

// One-time payments
model OneTimePayment {
  id             String        @id @default(cuid())
  organizationId String
  amount         Int // In cents
  currency       String        @default("USD")
  description    String
  status         PaymentStatus
  paymentMethod  String?
  stripeId       String?       @unique
  invoiceId      String?
  metadata       Json?         @default("{}")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([status])
  @@index([createdAt])
  @@map("one_time_payments")
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
}

enum PaymentProvider {
  STRIPE
  PAYPAL
  BANK_TRANSFER
  OTHER
}

// Translation model for storing internationalization content
model Translation {
  id        String   @id @default(cuid())
  key       String
  value     String
  namespace String
  locale    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([key, locale, namespace])
  @@index([namespace, locale])
}

// User preferences model for storing user-specific settings
model UserPreference {
  id        String   @id @default(cuid())
  userId    String   @unique
  currency  String   @default("USD")
  locale    String   @default("en-US")
  timezone  String   @default("UTC")
  user      User     @relation("UserToPreference", fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserPreferences {
  id             String   @id @default(cuid())
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id])
  language       String   @default("en")
  dateFormat     String   @default("long")
  numberFormat   String   @default("standard")
  currencyFormat String   @default("symbol")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// System metrics model
model SystemMetrics {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  cpu       Json // Stores CPU metrics
  memory    Json // Stores memory metrics
  disk      Json // Stores disk metrics
  network   Json // Stores network metrics

  @@index([timestamp])
}

// Performance metrics model
model PerformanceMetrics {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  requests  Json // Stores request metrics
  database  Json // Stores database metrics
  cache     Json // Stores cache metrics
  external  Json // Stores external service metrics

  @@index([timestamp])
}

// Health check model
model HealthCheck {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  name      String // Name of the health check
  status    String // healthy, degraded, or unhealthy
  message   String? // Optional message about the check
  metadata  Json? // Additional metadata about the check

  @@index([timestamp])
  @@index([status])
}

// Alert model
model Alert {
  id         String    @id @default(cuid())
  timestamp  DateTime  @default(now())
  type       String // Type of alert
  severity   String // INFO, WARNING, ERROR
  message    String // Alert message
  metadata   Json? // Additional metadata about the alert
  resolved   Boolean   @default(false)
  resolvedAt DateTime?

  @@index([timestamp])
  @@index([severity])
  @@index([resolved])
}

model UsageRecord {
  id             String       @id @default(uuid())
  customerId     String
  customer       Customer     @relation(fields: [customerId], references: [id])
  featureId      String
  feature        Feature      @relation(fields: [featureId], references: [id])
  quantity       Float
  timestamp      DateTime     @default(now())
  metadataJson   String?      @db.Text // JSON string for additional metadata
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId String
  user           User         @relation(fields: [userId], references: [id])
  userId         String

  @@index([customerId, featureId, timestamp])
  @@index([featureId, timestamp])
  @@index([organizationId])
  @@index([subscriptionId])
  @@index([userId])
}

model UsageTier {
  id            String      @id @default(cuid())
  featureId     String
  startQuantity Int
  endQuantity   Int?
  price         Int // Price in cents
  feature       PlanFeature @relation(fields: [featureId], references: [id], onDelete: Cascade)

  @@index([featureId])
  @@map("usage_tiers")
}

model TaxReportCache {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  periodStart    DateTime
  periodEnd      DateTime
  report         Json
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([organizationId])
  @@index([periodStart, periodEnd])
  @@map("tax_report_cache")
}

model UsageNotification {
  id             String   @id @default(cuid())
  subscriptionId String
  featureId      String
  threshold      Float // The percentage threshold that triggered this notification
  usage          Float // The usage amount at the time of notification
  limit          Float // The limit amount at the time of notification
  percentUsed    Float // The percentage of the limit used
  createdAt      DateTime @default(now())

  // Relations
  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  feature      Feature      @relation(fields: [featureId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
  @@index([featureId])
  @@index([createdAt])
  @@map("usage_notifications")
}

// Webhook models
model WebhookEndpoint {
  id                String            @id @default(cuid())
  organizationId    String
  url               String
  secret            String
  description       String?
  eventTypes        String[]
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  organization      Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  webhookDeliveries WebhookDelivery[]

  @@index([organizationId])
  @@map("webhook_endpoints")
}

model WebhookDelivery {
  id                String          @id @default(cuid())
  webhookEndpointId String
  eventType         String
  payload           Json
  status            String // PENDING, DELIVERED, FAILED
  statusCode        Int?
  response          Json?
  retryCount        Int             @default(0)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  webhookEndpoint   WebhookEndpoint @relation(fields: [webhookEndpointId], references: [id], onDelete: Cascade)

  @@index([webhookEndpointId])
  @@index([status])
  @@index([createdAt])
  @@map("webhook_deliveries")
}

// Event tracking system
model Event {
  id             String        @id @default(cuid())
  eventType      String
  resourceType   String
  resourceId     String
  organizationId String?
  userId         String?
  metadata       Json?         @default("{}")
  severity       String        @default("INFO") // INFO, WARNING, ERROR, CRITICAL
  timestamp      DateTime      @default(now())
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  user           User?         @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([eventType])
  @@index([resourceType, resourceId])
  @@index([organizationId])
  @@index([userId])
  @@index([timestamp])
  @@map("events")
}

model PricingRule {
  id               String      @id @default(uuid())
  planId           String
  plan             PricingPlan @relation(fields: [planId], references: [id])
  featureId        String
  feature          Feature     @relation(fields: [featureId], references: [id])
  type             String // 'metered', 'tiered', 'volume', 'flat_fee'
  unitAmount       Float // The per-unit price
  currency         String      @default("USD")
  meteredAggregate String? // 'sum', 'max', 'count' - how to aggregate metered usage
  tiersJson        String?     @db.Text // JSON string for pricing tiers
  freeQuantity     Float? // Free units before charging starts
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  @@unique([planId, featureId])
}

model UsageCharge {
  id                 String       @id @default(uuid())
  subscriptionId     String
  subscription       Subscription @relation(fields: [subscriptionId], references: [id])
  featureId          String
  feature            Feature      @relation(fields: [featureId], references: [id])
  billingPeriodStart DateTime
  billingPeriodEnd   DateTime
  amount             Float // Calculated charge amount
  quantity           Float // Total usage quantity
  currency           String       @default("USD")
  status             String // 'pending', 'charged', 'canceled'
  invoiceId          String? // Reference to invoice when charged
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  Currency           Currency?    @relation(fields: [currencyCode], references: [code])
  currencyCode       String?

  @@unique([subscriptionId, featureId, billingPeriodStart])
  @@index([subscriptionId, status])
}

model UsageLimit {
  id             String   @id @default(uuid())
  customerId     String
  customer       Customer @relation(fields: [customerId], references: [id])
  featureId      String
  feature        Feature  @relation(fields: [featureId], references: [id])
  limit          Float // Maximum allowed usage
  alertThreshold Float? // Optional alert threshold (percentage)
  alertSent      Boolean  @default(false)
  resetPeriod    String? // 'monthly', 'quarterly', 'annual', or null for no reset
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([customerId, featureId])
}

// Dunning configuration
model DunningConfig {
  id             String       @id @default(uuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  name           String
  description    String?
  isActive       Boolean      @default(false)
  stepsJson      String       @db.Text // JSON array of dunning steps
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([organizationId, name])
  @@index([organizationId])
}

// Dunning logs
model DunningLog {
  id             String       @id @default(uuid())
  subscriptionId String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  invoiceId      String?
  invoice        Invoice?     @relation(fields: [invoiceId], references: [id])
  customerId     String
  customer       Customer     @relation(fields: [customerId], references: [id])
  daysPastDue    Int
  actions        String[] // Array of actions taken: 'NOTIFICATION_SENT', 'PAYMENT_RETRY', etc.
  status         String // 'COMPLETED', 'FAILED'
  metadata       Json?        @default("{}")
  createdAt      DateTime     @default(now())

  @@index([subscriptionId])
  @@index([invoiceId])
  @@index([customerId])
  @@index([createdAt])
}

// Payment attempts for dunning
model PaymentAttempt {
  id             String       @id @default(uuid())
  subscriptionId String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  invoiceId      String?
  invoice        Invoice?     @relation(fields: [invoiceId], references: [id])
  amount         Float
  currency       String       @default("USD")
  status         String // 'SCHEDULED', 'PROCESSING', 'SUCCEEDED', 'FAILED', 'CANCELLED'
  failureCode    String?
  failureMessage String?
  scheduledFor   DateTime?
  processedAt    DateTime?
  metadata       Json?        @default("{}")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  Currency       Currency?    @relation(fields: [currencyCode], references: [code])
  currencyCode   String?

  @@index([subscriptionId])
  @@index([invoiceId])
  @@index([status])
  @@index([scheduledFor])
}

// Currency configuration
model Currency {
  code          String   @id @map("currency_code")
  name          String
  symbol        String
  decimalPlaces Int      @default(2)
  isDefault     Boolean  @default(false)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  pricingPlans    PricingPlan[]
  invoices        Invoice[]
  usageCharges    UsageCharge[]
  paymentAttempts PaymentAttempt[]
  subscriptions   Subscription[]
  customers       Customer[] // Default display currency for customers
}

// Exchange rates between currencies
model ExchangeRate {
  id           String   @id @default(cuid())
  fromCurrency String
  toCurrency   String
  rate         Float
  provider     String   @default("internal")
  lastUpdated  DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([fromCurrency, toCurrency])
  @@index([lastUpdated])
}

// Add locale model for language support
model Locale {
  code      String   @id // e.g., "en-US", "fr-FR", "de-DE"
  name      String // e.g., "English (US)", "French", "German"
  isDefault Boolean  @default(false)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  customers Customer[]
}

model CommunicationPrefs {
  id        String   @id @default(cuid())
  userId    String   @unique
  email     Boolean  @default(true)
  sms       Boolean  @default(false)
  inApp     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
}

model Usage {
  id             String   @id @default(cuid())
  subscriptionId String   @unique
  usageAmount    Float    @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum CreditAdjustmentType {
  CREDIT
  DEBIT
  REFUND
  INVOICE_PAYMENT
}

model CreditNote {
  id             String       @id @default(cuid())
  number         String       @unique
  invoiceId      String
  invoice        Invoice      @relation(fields: [invoiceId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  amount         Int
  taxAmount      Int          @default(0)
  totalAmount    Int
  currency       String       @default("USD")
  status         String       @default("ISSUED")
  notes          String?
  issuedAt       DateTime     @default(now())
  refundedAt     DateTime?
  metadata       Json?        @default("{}")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([organizationId])
  @@index([invoiceId])
}

model CreditAdjustment {
  id             String               @id @default(cuid())
  customerId     String
  customer       Customer             @relation(fields: [customerId], references: [id])
  organizationId String
  organization   Organization         @relation(fields: [organizationId], references: [id])
  amount         Int
  type           CreditAdjustmentType
  description    String
  reason         String?
  invoiceId      String?
  invoice        Invoice?             @relation(fields: [invoiceId], references: [id])
  adjustedById   String
  adjustedBy     User                 @relation(fields: [adjustedById], references: [id])
  metadata       Json?                @default("{}")
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt

  @@index([customerId])
  @@index([organizationId])
  @@index([invoiceId])
}

model SubscriptionCancellationFeedback {
  id                 String       @id @default(cuid())
  subscriptionId     String
  subscription       Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  reason             String
  additionalFeedback String?
  timestamp          DateTime     @default(now())
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  @@index([subscriptionId])
  @@map("subscription_cancellation_feedback")
}

model WinBackCampaign {
  id             String       @id @default(cuid())
  subscriptionId String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  reason         String
  offer          Json
  status         String       @default("PENDING") // PENDING, ACCEPTED, REJECTED, EXPIRED
  validUntil     DateTime
  acceptedAt     DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([subscriptionId])
  @@index([organizationId])
  @@map("win_back_campaigns")
}

model ScheduledEmail {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  template       String
  scheduledFor   DateTime
  data           Json
  sent           Boolean      @default(false)
  sentAt         DateTime?
  error          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([organizationId])
  @@index([scheduledFor])
  @@map("scheduled_emails")
}

enum SecurityEventSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum DataPrivacyRequestType {
  ACCESS
  DELETE
  MODIFY
}

enum DataPrivacyRegulation {
  GDPR
  CCPA
}

enum SecurityAlertStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  DISMISSED
}

model SecurityEvent {
  id        String                @id @default(cuid())
  type      String
  severity  SecurityEventSeverity
  metadata  Json
  timestamp DateTime              @default(now())
}

model SecurityAlert {
  id        String                @id @default(cuid())
  type      String
  severity  SecurityEventSeverity
  message   String
  metadata  Json
  status    SecurityAlertStatus   @default(OPEN)
  timestamp DateTime              @default(now())
  updatedAt DateTime              @updatedAt
}

model DataPrivacyRequest {
  id         String                 @id @default(cuid())
  userId     String
  type       DataPrivacyRequestType
  regulation DataPrivacyRegulation
  status     String                 @default("PENDING")
  metadata   Json                   @default("{}")
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt
  user       User                   @relation(fields: [userId], references: [id])
}

model BillingAuditLog {
  id        String   @id @default(cuid())
  userId    String
  eventType String
  metadata  Json
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model OrganizationSettings {
  id                   String       @id @default(cuid())
  organizationId       String       @unique
  defaultCurrency      String       @default("USD")
  defaultLanguage      String       @default("en-US")
  defaultTaxBehavior   String       @default("exclusive") // inclusive, exclusive, or automatic
  priceDisplaySettings Json? // For storing price display preferences
  taxSettings          Json? // For storing tax calculation rules
  organization         Organization @relation(fields: [organizationId], references: [id])
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
}

enum TaxType {
  VAT
  GST
  HST
  PST
  SALES_TAX
}

enum CustomerType {
  INDIVIDUAL
  BUSINESS
}

enum TaxRuleType {
  MODIFIER
  OVERRIDE
}

model TaxRate {
  id             String       @id @default(cuid())
  name           String
  description    String?
  rate           Float
  type           TaxType
  country        String
  state          String?
  city           String?
  isActive       Boolean      @default(true)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  stripeId       String?

  // Relations
  invoiceTaxes    InvoiceTaxRate[]
  taxRules        TaxRule[]
  exemptions      TaxExemption[]
  history         TaxRateHistory[]
  invoiceTaxRates InvoiceTax[]

  @@index([country, state, city])
  @@index([organizationId])
}

model TaxRule {
  id             String       @id @default(cuid())
  name           String
  description    String?
  type           TaxRuleType
  priority       Int
  conditions     Json
  modifier       Float?
  override       Float?
  countryCode    String
  stateCode      String?
  isActive       Boolean      @default(true)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  taxRateId      String
  taxRate        TaxRate      @relation(fields: [taxRateId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([organizationId])
  @@index([taxRateId])
}

model TaxExemption {
  id                String       @id @default(cuid())
  organizationId    String
  organization      Organization @relation(fields: [organizationId], references: [id])
  taxRateId         String
  taxRate           TaxRate      @relation(fields: [taxRateId], references: [id])
  certificateNumber String?
  certificateUrl    String?
  validUntil        DateTime?
  reason            String?
  isActive          Boolean      @default(true)
  createdAt         DateTime     @default(now())
  revokedAt         DateTime?
  revocationReason  String?
  Customer          Customer?    @relation(fields: [customerId], references: [id])
  customerId        String?

  @@index([organizationId])
  @@index([taxRateId])
}

model TaxIdValidation {
  id              String   @id @default(cuid())
  taxId           String
  countryCode     String
  type            TaxType
  isValid         Boolean
  businessName    String?
  businessAddress String?
  validatedAt     DateTime
  validUntil      DateTime
  metadata        Json?

  @@index([taxId, countryCode, type])
}

model InvoiceTaxRate {
  id        String  @id @default(cuid())
  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id])
  taxRateId String
  taxRate   TaxRate @relation(fields: [taxRateId], references: [id])
  amount    Float

  @@index([invoiceId])
  @@index([taxRateId])
}

enum UsageAlertType {
  PERCENTAGE
  ABSOLUTE
}

enum NotificationChannel {
  EMAIL
  WEBHOOK
}

model UsageAlert {
  id             String                @id @default(cuid())
  subscriptionId String
  subscription   Subscription          @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  featureId      String
  feature        Feature               @relation(fields: [featureId], references: [id])
  threshold      Float
  type           UsageAlertType
  notifyVia      NotificationChannel[]
  enabled        Boolean               @default(true)
  lastTriggered  DateTime?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt

  @@index([subscriptionId])
  @@index([featureId])
}
