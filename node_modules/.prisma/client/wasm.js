
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: a9055b89e58b4b5bfb59600785423b1db3d0e75d
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "a9055b89e58b4b5bfb59600785423b1db3d0e75d"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  password: 'password',
  role: 'role',
  status: 'status',
  twoFactorEnabled: 'twoFactorEnabled',
  twoFactorSecret: 'twoFactorSecret',
  backupCodes: 'backupCodes',
  lastLoginAt: 'lastLoginAt',
  lastPasswordChange: 'lastPasswordChange',
  failedLoginAttempts: 'failedLoginAttempts',
  lockedUntil: 'lockedUntil',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  communicationPrefsId: 'communicationPrefsId'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires',
  twoFactorVerified: 'twoFactorVerified'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  address: 'address',
  city: 'city',
  state: 'state',
  country: 'country',
  postalCode: 'postalCode',
  taxId: 'taxId',
  settings: 'settings',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  stripeCustomerId: 'stripeCustomerId'
};

exports.Prisma.UserOrganizationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  organizationId: 'organizationId',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  metadata: 'metadata',
  stripeId: 'stripeId'
};

exports.Prisma.PricingPlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  pricingType: 'pricingType',
  basePrice: 'basePrice',
  currency: 'currency',
  billingInterval: 'billingInterval',
  trialDays: 'trialDays',
  sortOrder: 'sortOrder',
  isActive: 'isActive',
  isPublic: 'isPublic',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PricingTierScalarFieldEnum = {
  id: 'id',
  planId: 'planId',
  upTo: 'upTo',
  price: 'price',
  flatFee: 'flatFee',
  perUnitFee: 'perUnitFee',
  infinite: 'infinite'
};

exports.Prisma.PlanFeatureScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  unitName: 'unitName',
  isHighlighted: 'isHighlighted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FeatureCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  code: 'code',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FeatureScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  description: 'description',
  unitLabel: 'unitLabel',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  categoryId: 'categoryId'
};

exports.Prisma.PlanFeatureAssociationScalarFieldEnum = {
  id: 'id',
  planId: 'planId',
  featureId: 'featureId',
  limits: 'limits'
};

exports.Prisma.PricingPromotionScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  description: 'description',
  discountType: 'discountType',
  discountValue: 'discountValue',
  maxRedemptions: 'maxRedemptions',
  timesRedeemed: 'timesRedeemed',
  startDate: 'startDate',
  endDate: 'endDate',
  isActive: 'isActive',
  isStackable: 'isStackable',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PromotionPlanScalarFieldEnum = {
  id: 'id',
  promotionId: 'promotionId',
  planId: 'planId'
};

exports.Prisma.PromotionFeatureScalarFieldEnum = {
  id: 'id',
  promotionId: 'promotionId',
  featureId: 'featureId'
};

exports.Prisma.PromotionRedemptionScalarFieldEnum = {
  id: 'id',
  promotionId: 'promotionId',
  subscriptionId: 'subscriptionId',
  redeemedAt: 'redeemedAt',
  metadata: 'metadata'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  name: 'name',
  email: 'email',
  phone: 'phone',
  address: 'address',
  city: 'city',
  state: 'state',
  country: 'country',
  postalCode: 'postalCode',
  taxId: 'taxId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  preferredCurrency: 'preferredCurrency',
  preferredLocale: 'preferredLocale',
  creditBalance: 'creditBalance'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  planId: 'planId',
  status: 'status',
  quantity: 'quantity',
  startDate: 'startDate',
  endDate: 'endDate',
  currentPeriodStart: 'currentPeriodStart',
  currentPeriodEnd: 'currentPeriodEnd',
  trialEndsAt: 'trialEndsAt',
  cancelAtPeriodEnd: 'cancelAtPeriodEnd',
  canceledAt: 'canceledAt',
  cancellationReason: 'cancellationReason',
  isPaused: 'isPaused',
  pausedAt: 'pausedAt',
  resumesAt: 'resumesAt',
  pauseReason: 'pauseReason',
  lastBillingDate: 'lastBillingDate',
  nextBillingDate: 'nextBillingDate',
  stripeSubscriptionId: 'stripeSubscriptionId',
  stripeCustomerId: 'stripeCustomerId',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  couponId: 'couponId',
  currency: 'currency',
  isSuspended: 'isSuspended',
  suspendedAt: 'suspendedAt',
  userId: 'userId'
};

exports.Prisma.PauseHistoryScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  pausedAt: 'pausedAt',
  resumesAt: 'resumesAt',
  resumedAt: 'resumedAt',
  reason: 'reason',
  createdAt: 'createdAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  customerId: 'customerId',
  number: 'number',
  status: 'status',
  dueDate: 'dueDate',
  subtotal: 'subtotal',
  total: 'total',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  currency: 'currency',
  exchangeRate: 'exchangeRate',
  lastPaymentError: 'lastPaymentError',
  metadata: 'metadata',
  userId: 'userId'
};

exports.Prisma.TaxRateHistoryScalarFieldEnum = {
  id: 'id',
  taxRateId: 'taxRateId',
  name: 'name',
  rate: 'rate',
  country: 'country',
  state: 'state',
  city: 'city',
  description: 'description',
  isActive: 'isActive',
  changedBy: 'changedBy',
  changedAt: 'changedAt',
  reason: 'reason'
};

exports.Prisma.InvoiceTaxScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  taxRateId: 'taxRateId',
  amount: 'amount',
  isExempt: 'isExempt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscriptionPlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  price: 'price',
  interval: 'interval',
  features: 'features',
  stripePriceId: 'stripePriceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  organizationId: 'organizationId',
  title: 'title',
  message: 'message',
  type: 'type',
  read: 'read',
  data: 'data',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProcessedWebhookEventScalarFieldEnum = {
  eventId: 'eventId',
  eventType: 'eventType',
  processedAt: 'processedAt'
};

exports.Prisma.PromotionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  discountType: 'discountType',
  discountAmount: 'discountAmount',
  currency: 'currency',
  active: 'active',
  startDate: 'startDate',
  endDate: 'endDate',
  maxRedemptions: 'maxRedemptions',
  redemptionCount: 'redemptionCount',
  applicablePlans: 'applicablePlans',
  stripeId: 'stripeId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  metadata: 'metadata'
};

exports.Prisma.CouponScalarFieldEnum = {
  id: 'id',
  code: 'code',
  description: 'description',
  discountType: 'discountType',
  discountAmount: 'discountAmount',
  currency: 'currency',
  maxRedemptions: 'maxRedemptions',
  redemptionCount: 'redemptionCount',
  startsAt: 'startsAt',
  expiresAt: 'expiresAt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  promotionId: 'promotionId'
};

exports.Prisma.OneTimePaymentScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  amount: 'amount',
  currency: 'currency',
  description: 'description',
  status: 'status',
  paymentMethod: 'paymentMethod',
  stripeId: 'stripeId',
  invoiceId: 'invoiceId',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TranslationScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  namespace: 'namespace',
  locale: 'locale',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserPreferenceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  currency: 'currency',
  locale: 'locale',
  timezone: 'timezone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserPreferencesScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  language: 'language',
  dateFormat: 'dateFormat',
  numberFormat: 'numberFormat',
  currencyFormat: 'currencyFormat',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SystemMetricsScalarFieldEnum = {
  id: 'id',
  timestamp: 'timestamp',
  cpu: 'cpu',
  memory: 'memory',
  disk: 'disk',
  network: 'network'
};

exports.Prisma.PerformanceMetricsScalarFieldEnum = {
  id: 'id',
  timestamp: 'timestamp',
  requests: 'requests',
  database: 'database',
  cache: 'cache',
  external: 'external'
};

exports.Prisma.HealthCheckScalarFieldEnum = {
  id: 'id',
  timestamp: 'timestamp',
  name: 'name',
  status: 'status',
  message: 'message',
  metadata: 'metadata'
};

exports.Prisma.AlertScalarFieldEnum = {
  id: 'id',
  timestamp: 'timestamp',
  type: 'type',
  severity: 'severity',
  message: 'message',
  metadata: 'metadata',
  resolved: 'resolved',
  resolvedAt: 'resolvedAt'
};

exports.Prisma.UsageRecordScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  featureId: 'featureId',
  quantity: 'quantity',
  timestamp: 'timestamp',
  metadataJson: 'metadataJson',
  createdAt: 'createdAt',
  organizationId: 'organizationId',
  subscriptionId: 'subscriptionId',
  userId: 'userId'
};

exports.Prisma.UsageTierScalarFieldEnum = {
  id: 'id',
  featureId: 'featureId',
  startQuantity: 'startQuantity',
  endQuantity: 'endQuantity',
  price: 'price'
};

exports.Prisma.TaxReportCacheScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  periodStart: 'periodStart',
  periodEnd: 'periodEnd',
  report: 'report',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UsageNotificationScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  featureId: 'featureId',
  threshold: 'threshold',
  usage: 'usage',
  limit: 'limit',
  percentUsed: 'percentUsed',
  createdAt: 'createdAt'
};

exports.Prisma.WebhookEndpointScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  url: 'url',
  secret: 'secret',
  description: 'description',
  eventTypes: 'eventTypes',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WebhookDeliveryScalarFieldEnum = {
  id: 'id',
  webhookEndpointId: 'webhookEndpointId',
  eventType: 'eventType',
  payload: 'payload',
  status: 'status',
  statusCode: 'statusCode',
  response: 'response',
  retryCount: 'retryCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  eventType: 'eventType',
  resourceType: 'resourceType',
  resourceId: 'resourceId',
  organizationId: 'organizationId',
  userId: 'userId',
  metadata: 'metadata',
  severity: 'severity',
  timestamp: 'timestamp'
};

exports.Prisma.PricingRuleScalarFieldEnum = {
  id: 'id',
  planId: 'planId',
  featureId: 'featureId',
  type: 'type',
  unitAmount: 'unitAmount',
  currency: 'currency',
  meteredAggregate: 'meteredAggregate',
  tiersJson: 'tiersJson',
  freeQuantity: 'freeQuantity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UsageChargeScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  featureId: 'featureId',
  billingPeriodStart: 'billingPeriodStart',
  billingPeriodEnd: 'billingPeriodEnd',
  amount: 'amount',
  quantity: 'quantity',
  currency: 'currency',
  status: 'status',
  invoiceId: 'invoiceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  currencyCode: 'currencyCode'
};

exports.Prisma.UsageLimitScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  featureId: 'featureId',
  limit: 'limit',
  alertThreshold: 'alertThreshold',
  alertSent: 'alertSent',
  resetPeriod: 'resetPeriod',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DunningConfigScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  name: 'name',
  description: 'description',
  isActive: 'isActive',
  stepsJson: 'stepsJson',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DunningLogScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  invoiceId: 'invoiceId',
  customerId: 'customerId',
  daysPastDue: 'daysPastDue',
  actions: 'actions',
  status: 'status',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.PaymentAttemptScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  invoiceId: 'invoiceId',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  failureCode: 'failureCode',
  failureMessage: 'failureMessage',
  scheduledFor: 'scheduledFor',
  processedAt: 'processedAt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  currencyCode: 'currencyCode'
};

exports.Prisma.CurrencyScalarFieldEnum = {
  code: 'code',
  name: 'name',
  symbol: 'symbol',
  decimalPlaces: 'decimalPlaces',
  isDefault: 'isDefault',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExchangeRateScalarFieldEnum = {
  id: 'id',
  fromCurrency: 'fromCurrency',
  toCurrency: 'toCurrency',
  rate: 'rate',
  provider: 'provider',
  lastUpdated: 'lastUpdated',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LocaleScalarFieldEnum = {
  code: 'code',
  name: 'name',
  isDefault: 'isDefault',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CommunicationPrefsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  email: 'email',
  sms: 'sms',
  inApp: 'inApp',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UsageScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  usageAmount: 'usageAmount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CreditNoteScalarFieldEnum = {
  id: 'id',
  number: 'number',
  invoiceId: 'invoiceId',
  organizationId: 'organizationId',
  amount: 'amount',
  taxAmount: 'taxAmount',
  totalAmount: 'totalAmount',
  currency: 'currency',
  status: 'status',
  notes: 'notes',
  issuedAt: 'issuedAt',
  refundedAt: 'refundedAt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CreditAdjustmentScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  organizationId: 'organizationId',
  amount: 'amount',
  type: 'type',
  description: 'description',
  reason: 'reason',
  invoiceId: 'invoiceId',
  adjustedById: 'adjustedById',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscriptionCancellationFeedbackScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  reason: 'reason',
  additionalFeedback: 'additionalFeedback',
  timestamp: 'timestamp',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WinBackCampaignScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  organizationId: 'organizationId',
  reason: 'reason',
  offer: 'offer',
  status: 'status',
  validUntil: 'validUntil',
  acceptedAt: 'acceptedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ScheduledEmailScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  template: 'template',
  scheduledFor: 'scheduledFor',
  data: 'data',
  sent: 'sent',
  sentAt: 'sentAt',
  error: 'error',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SecurityEventScalarFieldEnum = {
  id: 'id',
  type: 'type',
  severity: 'severity',
  metadata: 'metadata',
  timestamp: 'timestamp'
};

exports.Prisma.SecurityAlertScalarFieldEnum = {
  id: 'id',
  type: 'type',
  severity: 'severity',
  message: 'message',
  metadata: 'metadata',
  status: 'status',
  timestamp: 'timestamp',
  updatedAt: 'updatedAt'
};

exports.Prisma.DataPrivacyRequestScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  regulation: 'regulation',
  status: 'status',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BillingAuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  eventType: 'eventType',
  metadata: 'metadata',
  timestamp: 'timestamp'
};

exports.Prisma.OrganizationSettingsScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  defaultCurrency: 'defaultCurrency',
  defaultLanguage: 'defaultLanguage',
  defaultTaxBehavior: 'defaultTaxBehavior',
  priceDisplaySettings: 'priceDisplaySettings',
  taxSettings: 'taxSettings',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TaxRateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  rate: 'rate',
  type: 'type',
  country: 'country',
  state: 'state',
  city: 'city',
  isActive: 'isActive',
  organizationId: 'organizationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  stripeId: 'stripeId'
};

exports.Prisma.TaxRuleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  priority: 'priority',
  conditions: 'conditions',
  modifier: 'modifier',
  override: 'override',
  countryCode: 'countryCode',
  stateCode: 'stateCode',
  isActive: 'isActive',
  organizationId: 'organizationId',
  taxRateId: 'taxRateId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TaxExemptionScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  taxRateId: 'taxRateId',
  certificateNumber: 'certificateNumber',
  certificateUrl: 'certificateUrl',
  validUntil: 'validUntil',
  reason: 'reason',
  isActive: 'isActive',
  createdAt: 'createdAt',
  revokedAt: 'revokedAt',
  revocationReason: 'revocationReason',
  customerId: 'customerId'
};

exports.Prisma.TaxIdValidationScalarFieldEnum = {
  id: 'id',
  taxId: 'taxId',
  countryCode: 'countryCode',
  type: 'type',
  isValid: 'isValid',
  businessName: 'businessName',
  businessAddress: 'businessAddress',
  validatedAt: 'validatedAt',
  validUntil: 'validUntil',
  metadata: 'metadata'
};

exports.Prisma.InvoiceTaxRateScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  taxRateId: 'taxRateId',
  amount: 'amount'
};

exports.Prisma.UsageAlertScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  featureId: 'featureId',
  threshold: 'threshold',
  type: 'type',
  notifyVia: 'notifyVia',
  enabled: 'enabled',
  lastTriggered: 'lastTriggered',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  SUPER_ADMIN: 'SUPER_ADMIN',
  ADMIN: 'ADMIN',
  STAFF: 'STAFF',
  USER: 'USER'
};

exports.UserStatus = exports.$Enums.UserStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED',
  PENDING_VERIFICATION: 'PENDING_VERIFICATION'
};

exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  TRIALING: 'TRIALING',
  PAST_DUE: 'PAST_DUE',
  CANCELED: 'CANCELED',
  INCOMPLETE: 'INCOMPLETE',
  INCOMPLETE_EXPIRED: 'INCOMPLETE_EXPIRED',
  UNPAID: 'UNPAID',
  ENDED: 'ENDED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  INFO: 'INFO',
  SUCCESS: 'SUCCESS',
  WARNING: 'WARNING',
  ERROR: 'ERROR'
};

exports.DiscountType = exports.$Enums.DiscountType = {
  PERCENTAGE: 'PERCENTAGE',
  FIXED_AMOUNT: 'FIXED_AMOUNT'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  SUCCEEDED: 'SUCCEEDED',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED'
};

exports.CreditAdjustmentType = exports.$Enums.CreditAdjustmentType = {
  CREDIT: 'CREDIT',
  DEBIT: 'DEBIT',
  REFUND: 'REFUND',
  INVOICE_PAYMENT: 'INVOICE_PAYMENT'
};

exports.SecurityEventSeverity = exports.$Enums.SecurityEventSeverity = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.SecurityAlertStatus = exports.$Enums.SecurityAlertStatus = {
  OPEN: 'OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  RESOLVED: 'RESOLVED',
  DISMISSED: 'DISMISSED'
};

exports.DataPrivacyRequestType = exports.$Enums.DataPrivacyRequestType = {
  ACCESS: 'ACCESS',
  DELETE: 'DELETE',
  MODIFY: 'MODIFY'
};

exports.DataPrivacyRegulation = exports.$Enums.DataPrivacyRegulation = {
  GDPR: 'GDPR',
  CCPA: 'CCPA'
};

exports.TaxType = exports.$Enums.TaxType = {
  VAT: 'VAT',
  GST: 'GST',
  HST: 'HST',
  PST: 'PST',
  SALES_TAX: 'SALES_TAX'
};

exports.TaxRuleType = exports.$Enums.TaxRuleType = {
  MODIFIER: 'MODIFIER',
  OVERRIDE: 'OVERRIDE'
};

exports.UsageAlertType = exports.$Enums.UsageAlertType = {
  PERCENTAGE: 'PERCENTAGE',
  ABSOLUTE: 'ABSOLUTE'
};

exports.NotificationChannel = exports.$Enums.NotificationChannel = {
  EMAIL: 'EMAIL',
  WEBHOOK: 'WEBHOOK'
};

exports.Prisma.ModelName = {
  User: 'User',
  Account: 'Account',
  Session: 'Session',
  VerificationToken: 'VerificationToken',
  Organization: 'Organization',
  UserOrganization: 'UserOrganization',
  Product: 'Product',
  PricingPlan: 'PricingPlan',
  PricingTier: 'PricingTier',
  PlanFeature: 'PlanFeature',
  FeatureCategory: 'FeatureCategory',
  Feature: 'Feature',
  PlanFeatureAssociation: 'PlanFeatureAssociation',
  PricingPromotion: 'PricingPromotion',
  PromotionPlan: 'PromotionPlan',
  PromotionFeature: 'PromotionFeature',
  PromotionRedemption: 'PromotionRedemption',
  Customer: 'Customer',
  Subscription: 'Subscription',
  PauseHistory: 'PauseHistory',
  Invoice: 'Invoice',
  TaxRateHistory: 'TaxRateHistory',
  InvoiceTax: 'InvoiceTax',
  SubscriptionPlan: 'SubscriptionPlan',
  Notification: 'Notification',
  ProcessedWebhookEvent: 'ProcessedWebhookEvent',
  Promotion: 'Promotion',
  Coupon: 'Coupon',
  OneTimePayment: 'OneTimePayment',
  Translation: 'Translation',
  UserPreference: 'UserPreference',
  UserPreferences: 'UserPreferences',
  SystemMetrics: 'SystemMetrics',
  PerformanceMetrics: 'PerformanceMetrics',
  HealthCheck: 'HealthCheck',
  Alert: 'Alert',
  UsageRecord: 'UsageRecord',
  UsageTier: 'UsageTier',
  TaxReportCache: 'TaxReportCache',
  UsageNotification: 'UsageNotification',
  WebhookEndpoint: 'WebhookEndpoint',
  WebhookDelivery: 'WebhookDelivery',
  Event: 'Event',
  PricingRule: 'PricingRule',
  UsageCharge: 'UsageCharge',
  UsageLimit: 'UsageLimit',
  DunningConfig: 'DunningConfig',
  DunningLog: 'DunningLog',
  PaymentAttempt: 'PaymentAttempt',
  Currency: 'Currency',
  ExchangeRate: 'ExchangeRate',
  Locale: 'Locale',
  CommunicationPrefs: 'CommunicationPrefs',
  Usage: 'Usage',
  CreditNote: 'CreditNote',
  CreditAdjustment: 'CreditAdjustment',
  SubscriptionCancellationFeedback: 'SubscriptionCancellationFeedback',
  WinBackCampaign: 'WinBackCampaign',
  ScheduledEmail: 'ScheduledEmail',
  SecurityEvent: 'SecurityEvent',
  SecurityAlert: 'SecurityAlert',
  DataPrivacyRequest: 'DataPrivacyRequest',
  BillingAuditLog: 'BillingAuditLog',
  OrganizationSettings: 'OrganizationSettings',
  TaxRate: 'TaxRate',
  TaxRule: 'TaxRule',
  TaxExemption: 'TaxExemption',
  TaxIdValidation: 'TaxIdValidation',
  InvoiceTaxRate: 'InvoiceTaxRate',
  UsageAlert: 'UsageAlert'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
