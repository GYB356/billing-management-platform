import { readFileSync } from "fs";
import { runInNewContext } from "vm";
<<<<<<< HEAD
const cache = new Map();
export function loadManifest(path, shouldCache = true) {
=======
import { deepFreeze } from "../shared/lib/deep-freeze";
const sharedCache = new Map();
export function loadManifest(path, shouldCache = true, cache = sharedCache) {
>>>>>>> 4f9d35bd5c5bf095848f6fc99f7e7bfe5212365f
    const cached = shouldCache && cache.get(path);
    if (cached) {
        return cached;
    }
<<<<<<< HEAD
    const manifest = JSON.parse(readFileSync(path, "utf8"));
=======
    let manifest = JSON.parse(readFileSync(path, "utf8"));
    // Freeze the manifest so it cannot be modified if we're caching it.
    if (shouldCache) {
        manifest = deepFreeze(manifest);
    }
>>>>>>> 4f9d35bd5c5bf095848f6fc99f7e7bfe5212365f
    if (shouldCache) {
        cache.set(path, manifest);
    }
    return manifest;
}
<<<<<<< HEAD
export function evalManifest(path, shouldCache = true) {
=======
export function evalManifest(path, shouldCache = true, cache = sharedCache) {
>>>>>>> 4f9d35bd5c5bf095848f6fc99f7e7bfe5212365f
    const cached = shouldCache && cache.get(path);
    if (cached) {
        return cached;
    }
    const content = readFileSync(path, "utf8");
    if (content.length === 0) {
        throw new Error("Manifest file is empty");
    }
<<<<<<< HEAD
    const contextObject = {};
    runInNewContext(content, contextObject);
=======
    let contextObject = {};
    runInNewContext(content, contextObject);
    // Freeze the context object so it cannot be modified if we're caching it.
    if (shouldCache) {
        contextObject = deepFreeze(contextObject);
    }
>>>>>>> 4f9d35bd5c5bf095848f6fc99f7e7bfe5212365f
    if (shouldCache) {
        cache.set(path, contextObject);
    }
    return contextObject;
}
<<<<<<< HEAD
export function clearManifestCache(path) {
=======
export function clearManifestCache(path, cache = sharedCache) {
>>>>>>> 4f9d35bd5c5bf095848f6fc99f7e7bfe5212365f
    return cache.delete(path);
}

//# sourceMappingURL=load-manifest.js.map