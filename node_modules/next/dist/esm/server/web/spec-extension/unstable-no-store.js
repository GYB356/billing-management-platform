import { staticGenerationAsyncStorage } from "../../../client/components/static-generation-async-storage.external";
<<<<<<< HEAD
import { staticGenerationBailout } from "../../../client/components/static-generation-bailout";
export function unstable_noStore() {
    const staticGenerationStore = staticGenerationAsyncStorage.getStore();
    if (staticGenerationStore == null ? void 0 : staticGenerationStore.isUnstableCacheCallback) {
        // if called within a next/cache call, we want to cache the result
        // and defer to the next/cache call to handle how to cache the result.
        return;
    }
    // Mark the static generation context has unstable_noStore
    if (staticGenerationStore) {
        staticGenerationStore.isUnstableNoStore = true;
    }
    staticGenerationBailout("unstable_noStore", {
        link: "https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering"
    });
=======
import { markCurrentScopeAsDynamic } from "../../app-render/dynamic-rendering";
/**
 * This function can be used to declaratively opt out of static rendering and indicate a particular component should not be cached.
 *
 * It marks the current scope as dynamic.
 *
 * - In [non-PPR](https://nextjs.org/docs/app/api-reference/next-config-js/partial-prerendering) cases this will make a static render
 * halt and mark the page as dynamic.
 * - In PPR cases this will postpone the render at this location.
 *
 * If we are inside a cache scope then this function does nothing.
 *
 * @note It expects to be called within App Router and will error otherwise.
 *
 * Read more: [Next.js Docs: `unstable_noStore`](https://nextjs.org/docs/app/api-reference/functions/unstable_noStore)
 */ export function unstable_noStore() {
    const callingExpression = "unstable_noStore()";
    const store = staticGenerationAsyncStorage.getStore();
    if (!store) {
        // This generally implies we are being called in Pages router. We should probably not support
        // unstable_noStore in contexts outside of `react-server` condition but since we historically
        // have not errored here previously, we maintain that behavior for now.
        return;
    } else if (store.forceStatic) {
        return;
    } else {
        store.isUnstableNoStore = true;
        markCurrentScopeAsDynamic(store, callingExpression);
    }
>>>>>>> 4f9d35bd5c5bf095848f6fc99f7e7bfe5212365f
}

//# sourceMappingURL=unstable-no-store.js.map