import type { CacheNodeSeedData } from './types';
<<<<<<< HEAD
import React, { type ReactNode } from 'react';
import type { LoaderTree } from '../lib/app-dir-module';
import type { CreateSegmentPath, AppRenderContext } from './app-render';
type ComponentTree = {
    seedData: CacheNodeSeedData;
    styles: ReactNode;
};
=======
import React from 'react';
import type { LoaderTree } from '../lib/app-dir-module';
import type { CreateSegmentPath, AppRenderContext } from './app-render';
>>>>>>> 4f9d35bd5c5bf095848f6fc99f7e7bfe5212365f
type Params = {
    [key: string]: string | string[];
};
/**
<<<<<<< HEAD
 * This component will call `React.postpone` that throws the postponed error.
 */
export declare const Postpone: ({ postpone, }: {
    postpone: (reason: string) => never;
}) => never;
/**
 * Use the provided loader tree to create the React Component tree.
 */
export declare function createComponentTree({ createSegmentPath, loaderTree: tree, parentParams, firstItem, rootLayoutIncluded, injectedCSS, injectedJS, injectedFontPreloadTags, asNotFound, metadataOutlet, ctx, missingSlots, }: {
=======
 * Use the provided loader tree to create the React Component tree.
 */
export declare function createComponentTree(props: {
>>>>>>> 4f9d35bd5c5bf095848f6fc99f7e7bfe5212365f
    createSegmentPath: CreateSegmentPath;
    loaderTree: LoaderTree;
    parentParams: Params;
    rootLayoutIncluded: boolean;
    firstItem?: boolean;
    injectedCSS: Set<string>;
    injectedJS: Set<string>;
    injectedFontPreloadTags: Set<string>;
    asNotFound?: boolean;
    metadataOutlet?: React.ReactNode;
    ctx: AppRenderContext;
    missingSlots?: Set<string>;
<<<<<<< HEAD
}): Promise<ComponentTree>;
=======
}): Promise<CacheNodeSeedData>;
>>>>>>> 4f9d35bd5c5bf095848f6fc99f7e7bfe5212365f
export {};
