"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
<<<<<<< HEAD
    pathify: null,
    instantiateEmscriptenWasm: null
=======
    instantiateEmscriptenWasm: null,
    pathify: null
>>>>>>> 4f9d35bd5c5bf095848f6fc99f7e7bfe5212365f
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
<<<<<<< HEAD
    pathify: function() {
        return pathify;
    },
    instantiateEmscriptenWasm: function() {
        return instantiateEmscriptenWasm;
=======
    instantiateEmscriptenWasm: function() {
        return instantiateEmscriptenWasm;
    },
    pathify: function() {
        return pathify;
>>>>>>> 4f9d35bd5c5bf095848f6fc99f7e7bfe5212365f
    }
});
const _url = require("url");
function pathify(path) {
    if (path.startsWith("file://")) {
        path = (0, _url.fileURLToPath)(path);
    }
    return path;
}
function instantiateEmscriptenWasm(factory, path, workerJS = "") {
    return factory({
        locateFile (requestPath) {
            // The glue code generated by emscripten uses the original
            // file names of the worker file and the wasm binary.
            // These will have changed in the bundling process and
            // we need to inject them here.
            if (requestPath.endsWith(".wasm")) return pathify(path);
            if (requestPath.endsWith(".worker.js")) return pathify(workerJS);
            return requestPath;
        }
    });
}

//# sourceMappingURL=emscripten-utils.js.map