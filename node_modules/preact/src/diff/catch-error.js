<<<<<<< HEAD
/**
 * Find the closest error boundary to a thrown error and call it
 * @param {object} error The thrown value
 * @param {import('../internal').VNode} vnode The vnode that threw
 * the error that was caught (except for unmounting when this parameter
 * is the highest parent that was being unmounted)
=======
import { NULL } from '../constants';

/**
 * Find the closest error boundary to a thrown error and call it
 * @param {object} error The thrown value
 * @param {import('../internal').VNode} vnode The vnode that threw the error that was caught (except
 * for unmounting when this parameter is the highest parent that was being
 * unmounted)
>>>>>>> 4f9d35bd5c5bf095848f6fc99f7e7bfe5212365f
 * @param {import('../internal').VNode} [oldVNode]
 * @param {import('../internal').ErrorInfo} [errorInfo]
 */
export function _catchError(error, vnode, oldVNode, errorInfo) {
	/** @type {import('../internal').Component} */
<<<<<<< HEAD
	let component, ctor, handled;
=======
	let component,
		/** @type {import('../internal').ComponentType} */
		ctor,
		/** @type {boolean} */
		handled;
>>>>>>> 4f9d35bd5c5bf095848f6fc99f7e7bfe5212365f

	for (; (vnode = vnode._parent); ) {
		if ((component = vnode._component) && !component._processingException) {
			try {
				ctor = component.constructor;

<<<<<<< HEAD
				if (ctor && ctor.getDerivedStateFromError != null) {
=======
				if (ctor && ctor.getDerivedStateFromError != NULL) {
>>>>>>> 4f9d35bd5c5bf095848f6fc99f7e7bfe5212365f
					component.setState(ctor.getDerivedStateFromError(error));
					handled = component._dirty;
				}

<<<<<<< HEAD
				if (component.componentDidCatch != null) {
=======
				if (component.componentDidCatch != NULL) {
>>>>>>> 4f9d35bd5c5bf095848f6fc99f7e7bfe5212365f
					component.componentDidCatch(error, errorInfo || {});
					handled = component._dirty;
				}

				// This is an error boundary. Mark it as having bailed out, and whether it was mid-hydration.
				if (handled) {
					return (component._pendingError = component);
				}
			} catch (e) {
				error = e;
			}
		}
	}

	throw error;
}
