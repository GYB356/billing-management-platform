import parser from 'postcss-selector-parser'
<<<<<<< HEAD
import { movePseudos } from './pseudoElements'
=======
import { collectPseudoElements, sortSelector } from './formatVariantSelector.js'
>>>>>>> 4f9d35bd5c5bf095848f6fc99f7e7bfe5212365f

export function applyImportantSelector(selector, important) {
  let sel = parser().astSync(selector)

  sel.each((sel) => {
<<<<<<< HEAD
    // For nesting, we only need to wrap a selector with :is() if it has a top-level combinator,
    // e.g. `.dark .text-white`, to be independent of DOM order. Any other selector, including
    // combinators inside of pseudos like `:where()`, are ok to nest.
    let shouldWrap = sel.nodes.some((node) => node.type === 'combinator')

    if (shouldWrap) {
=======
    // Wrap with :is if it's not already wrapped
    let isWrapped =
      sel.nodes[0].type === 'pseudo' &&
      sel.nodes[0].value === ':is' &&
      sel.nodes.every((node) => node.type !== 'combinator')

    if (!isWrapped) {
>>>>>>> 4f9d35bd5c5bf095848f6fc99f7e7bfe5212365f
      sel.nodes = [
        parser.pseudo({
          value: ':is',
          nodes: [sel.clone()],
        }),
      ]
    }

<<<<<<< HEAD
    movePseudos(sel)
=======
    let [pseudoElements] = collectPseudoElements(sel)
    if (pseudoElements.length > 0) {
      sel.nodes.push(...pseudoElements.sort(sortSelector))
    }
>>>>>>> 4f9d35bd5c5bf095848f6fc99f7e7bfe5212365f
  })

  return `${important} ${sel.toString()}`
}
