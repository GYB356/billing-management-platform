// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Existing models
model User {
  id          String   @id @default(cuid())
  name        String?
  email       String   @unique
  password    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  notifications Notification[]
  role        String    @default("user")
  // ...existing fields...

  @@index([email])
}

// New models added for billing platform
model Organization {
  id              String   @id @default(cuid())
  name            String
  email           String?
  stripeCustomerId String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  notifications   Notification[]
  webhooks        Webhook[]
  apiKeys         ApiKey[]
  carbonEstimates CarbonEstimate[]
  billingRules    BillingRule[]
  orders          Order[]
}

model Customer {
  id                String        @id @default(cuid())
  userId            String
  stripeCustomerId  String?      @unique
  name              String?
  email             String
  payments          Payment[]
  subscription      Subscription?
  taxCalculations   TaxCalculation[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  orders            Order[]

  @@index([userId])
}

enum SubscriptionStatus {
  ACTIVE
  TRIALING
  PAST_DUE
  CANCELED
  PAUSED
  INCOMPLETE
  INCOMPLETE_EXPIRED
}

model Subscription {
  id                   String             @id @default(cuid())
  customerId           String             @unique
  customer             Customer           @relation(fields: [customerId], references: [id])
  status               SubscriptionStatus
  planId              String
  plan                Plan               @relation(fields: [planId], references: [id])
  stripeSubscriptionId String?           @unique
  currentPeriodStart   DateTime
  currentPeriodEnd    DateTime
  cancelAtPeriodEnd   Boolean           @default(false)
  cancelledAt         DateTime?
  pausedAt            DateTime?
  resumesAt           DateTime?
  trialEndsAt         DateTime?
  payments            Payment[]
  usageRecords        UsageRecord[]
  billingCycleAnchor  DateTime
  proration           Json?
  metadata            Json?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@index([customerId])
}

model Plan {
  id             String   @id @default(cuid())
  name           String
  description    String?
  basePrice      Float    // Base price before dynamic adjustments
  currentPrice   Float    // Current active price
  currency       String   @default("USD")
  interval       String   @default("month")
  stripePriceId  String?
  isActive       Boolean  @default(true)
  features       PlanFeature[]
  usageLimits    UsageLimit[]
  sortOrder      Int      @default(0)
  metadata       Json?
  priceHistory   PriceHistory[]
  priceTests     PriceTest[]
  revenueRules   RevenueRecognitionRule[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  subscriptions  Subscription[]
  marketSegment  String?  // For segment-based pricing
  costBasis      Float?   // For margin calculations
  churnRisk      Float?   // Predicted churn probability
}

model PlanFeature {
  id          String   @id @default(cuid())
  planId      String
  plan        Plan     @relation(fields: [planId], references: [id])
  name        String
  description String?
  included    Boolean  @default(true)
  value       String?
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([planId])
}

model UsageLimit {
  id          String   @id @default(cuid())
  planId      String
  plan        Plan     @relation(fields: [planId], references: [id])
  featureKey  String
  limit       Float
  interval    String   @default("month")
  overage     Boolean  @default(false)
  overagePrice Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([planId])
  @@index([featureKey])
}

model Invoice {
  id             String   @id @default(cuid())
  organizationId String
  amount         Float
  currency       String   @default("USD")
  status         String
  stripeInvoiceId String?
  pdfUrl         String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  // ...relationships...
}

model UsageRecord {
  id             String   @id @default(cuid())
  subscriptionId String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  featureKey     String
  quantity       Float
  timestamp      DateTime @default(now())
  billingPeriodStart DateTime
  billingPeriodEnd   DateTime
  processed      Boolean  @default(false)
  metadata       Json?

  @@index([subscriptionId])
  @@index([featureKey])
  @@index([billingPeriodStart, billingPeriodEnd])
}

model Report {
  id          String   @id @default(cuid())
  type        String
  format      String
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  downloadUrl String?
  metadata    Json?
}

model Metric {
  id        String   @id @default(cuid())
  name      String
  value     Float
  timestamp DateTime @default(now())
  tags      Json?
}

model EmailNotification {
  id        String    @id @default(cuid())
  type      String
  status    String
  to        String
  subject   String
  body      String
  sentAt    DateTime?
  createdAt DateTime  @default(now())
  metadata  Json?
}

model Webhook {
  id            String   @id @default(cuid())
  organizationId String
  organization  Organization @relation(fields: [organizationId], references: [id])
  url           String
  secret        String
  events        String[]
  status        String   @default("ACTIVE")
  retryConfig   Json
  lastSuccess   DateTime?
  lastFailure   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deliveries    WebhookDelivery[]

  @@index([organizationId])
}

model WebhookDelivery {
  id         String   @id @default(cuid())
  webhookId  String
  webhook    Webhook  @relation(fields: [webhookId], references: [id])
  payload    Json
  status     String
  statusCode Int?
  response   String?
  error      String?
  retries    Int      @default(0)
  createdAt  DateTime @default(now())

  @@index([webhookId])
}

model Payment {
  id              String   @id @default(cuid())
  amount          Float
  currency        String
  status          String
  paymentIntentId String
  customerId      String
  processor       String   // 'stripe', 'bitpay', 'wyre', etc.
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model FinancingOffer {
  id         String   @id @default(cuid())
  amount     Float
  currency   String
  provider   String   // 'stripe_capital', 'finbox', 'rutter'
  customerId String
  status     String
  offerId    String
  terms      Json
  metadata   Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model CarbonEstimate {
  id             String   @id @default(cuid())
  transactionId  String
  customerId     String
  totalEmissions Float
  breakdown      Json
  patchEstimateId String
  status         String
  offsetStatus   String
  offsetDetails  Json?
  metadata       Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model BillingRule {
  id          String   @id @default(cuid())
  name        String
  description String?
  components  Json
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model BillingRuleTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String
  components  Json
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id             String    @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  customerId     String
  customer       Customer     @relation(fields: [customerId], references: [id])
  amount         Float
  currency       String
  status         String      // PENDING, PROCESSING, COMPLETED, FAILED
  metadata       Json?
  payments       Payment[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@index([organizationId])
  @@index([customerId])
  @@index([status])
}

model PriceHistory {
  id          String   @id @default(cuid())
  planId      String
  plan        Plan     @relation(fields: [planId], references: [id])
  price       Float
  effectiveFrom DateTime
  effectiveTo   DateTime?
  reason      String?  // e.g. "market_adjustment", "test_result", "seasonal"
  metadata    Json?
  createdAt   DateTime @default(now())

  @@index([planId])
}

model PriceTest {
  id          String   @id @default(cuid())
  planId      String
  plan        Plan     @relation(fields: [planId], references: [id])
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime?
  status      String   // PLANNED, ACTIVE, COMPLETED, CANCELLED
  variants    PriceTestVariant[]
  targetMetric String  // e.g. "conversion_rate", "revenue", "ltv"
  minConfidence Float  // Required confidence level
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([planId])
}

model PriceTestVariant {
  id          String   @id @default(cuid())
  testId      String
  test        PriceTest @relation(fields: [testId], references: [id])
  price       Float
  name        String
  description String?
  conversionRate Float?
  revenue     Float?
  subscribers Int     @default(0)
  isControl   Boolean @default(false)
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([testId])
}

model MarketBenchmark {
  id          String   @id @default(cuid())
  segment     String
  productType String
  avgPrice    Float
  medianPrice Float
  minPrice    Float
  maxPrice    Float
  sampleSize  Int
  source      String
  collectedAt DateTime @default(now())
  metadata    Json?

  @@index([segment, productType])
}

model RevenueRecognitionRule {
  id          String   @id @default(cuid())
  planId      String
  plan        Plan     @relation(fields: [planId], references: [id])
  type        String   // IMMEDIATE, STRAIGHT_LINE, USAGE_BASED, MILESTONE
  deferralPeriod Int?  // Days to defer revenue
  conditions  Json?    // Conditions for recognition
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([planId])
}

model RevenueLedger {
  id            String   @id @default(cuid())
  subscriptionId String
  amount        Float
  currency      String
  recognizedDate DateTime
  deferredAmount Float?
  deferredUntil DateTime?
  type          String  // RECURRING, USAGE, ONE_TIME
  status        String  // PENDING, RECOGNIZED, DEFERRED
  metadata      Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([subscriptionId])
  @@index([recognizedDate])
}

model ChurnPrediction {
  id            String   @id @default(cuid())
  subscriptionId String
  probability   Float    // 0-1 probability of churning
  factors       Json     // Contributing factors
  nextBillDate  DateTime
  predictedDate DateTime @default(now())
  metadata      Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([subscriptionId])
  @@index([probability])
}

model CohortAnalysis {
  id          String   @id @default(cuid())
  cohortDate  DateTime
  cohortSize  Int
  metric      String   // MRR, Churn, LTV, etc.
  values      Json     // Time series data
  segment     String?
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([cohortDate])
  @@index([metric])
}

model ForecastModel {
  id           String          @id @default(uuid())
  name         String
  config       Json
  metadata     Json?
  status       String         // initializing, trained, error
  createdAt    DateTime       @default(now())
  lastTraining DateTime?
  metrics      Json?
  forecasts    ForecastResult[]
  timeSeriesData TimeSeriesData[]
}

model TimeSeriesData {
  id        String      @id @default(uuid())
  timestamp DateTime
  value     Float
  metadata  Json?
  modelId   String
  model     ForecastModel @relation(fields: [modelId], references: [id])
}

model ForecastResult {
  id          String    @id @default(uuid())
  timestamp   DateTime
  value       Float
  lowerBound  Float?
  upperBound  Float?
  confidence  Float?
  metadata    Json?
  modelId     String
  model       ForecastModel @relation(fields: [modelId], references: [id])
}

model MarketTrend {
  id          String    @id @default(uuid())
  timestamp   DateTime
  trend       Float
  seasonality Float?
  metadata    Json?
}

model PredictionInterval {
  id          String    @id @default(uuid())
  timestamp   DateTime
  lowerBound  Float
  upperBound  Float
  confidence  Float
  metadata    Json?
}

// Additional models can be added here
