generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String               @id @default(cuid())
  name                 String?
  email                String               @unique
  emailVerified        DateTime?
  image                String?
  password             String?
  role                 UserRole             @default(USER)
  status               UserStatus           @default(ACTIVE)
  is2FAEnabled         Boolean              @default(false)
  twoFactorSecret      String?
  last2FAVerified      DateTime?
  backupCodes          String[]             @default([])
  lastLoginAt          DateTime?
  lastPasswordChange   DateTime?
  failedLoginAttempts  Int                  @default(0)
  lockedUntil          DateTime?
  deletedAt            DateTime?
  anonymized           Boolean              @default(false)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  communicationPrefsId String?
  BillingAuditLog      BillingAuditLog[]
  CreditAdjustment     CreditAdjustment[]
  DataPrivacyRequest   DataPrivacyRequest[]
  TaxRateHistory       TaxRateHistory[]
  UsageRecord          UsageRecord[]
  UserPreference       UserPreference?
  UserPreferences      UserPreferences?
  accounts             accounts[]
  events               events[]
  invoices             Invoice[]
  notifications        notifications[]
  sessions             sessions[]
  subscriptions        Subscription[]
  userOrganizations    UserOrganization[]
  CommunicationPrefs   CommunicationPrefs?  @relation(fields: [communicationPrefsId], references: [id])
  apiTokens            ApiToken[]
  auditLogs            AuditLog[]

  @@index([email])
  @@map("users")
}

model Organization {
  id                   String                @id @default(cuid())
  name                 String
  email                String?               @unique
  phone                String?
  address              String?
  city                 String?
  state                String?
  country              String?
  postalCode           String?
  taxId                String?
  settings             Json?                 @default("{}")
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  stripeCustomerId     String?               @unique
  CreditAdjustment     CreditAdjustment[]
  CreditNote           CreditNote[]
  DunningConfig        DunningConfig[]
  OrganizationSettings OrganizationSettings?
  TaxExemption         TaxExemption[]
  TaxRate              TaxRate[]
  TaxRule              TaxRule[]
  UsageRecord          UsageRecord[]
  customers            Customer[]
  events               events[]
  invoices             Invoice[]
  notifications        notifications[]
  one_time_payments    one_time_payments[]
  scheduled_emails     scheduled_emails[]
  subscriptions        Subscription[]
  tax_report_cache     tax_report_cache[]
  userOrganizations    UserOrganization[]
  webhook_endpoints    webhook_endpoints[]
  win_back_campaigns   win_back_campaigns[]
  paymentMethods       PaymentMethod[]

  @@map("organizations")
}

model UserOrganization {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@map("user_organizations")
}

model Customer {
  id                String             @id @default(cuid())
  organizationId    String
  name              String
  email             String?
  phone             String?
  address           String?
  city              String?
  state             String?
  country           String?
  postalCode        String?
  taxId             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  preferredCurrency String?
  preferredLocale   String?
  creditBalance     Int                @default(0)
  CreditAdjustment  CreditAdjustment[]
  DunningLog        DunningLog[]
  TaxExemption      TaxExemption[]
  UsageLimit        UsageLimit[]
  UsageRecord       UsageRecord[]
  organization      Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  Currency          Currency?          @relation(fields: [preferredCurrency], references: [currency_code])
  Locale            Locale?            @relation(fields: [preferredLocale], references: [code])
  invoices          Invoice[]
  paymentMethods    PaymentMethod[]
  transactions      Transaction[]

  @@unique([organizationId, email])
  @@map("customers")
}

model Subscription {
  id                                 String                               @id @default(cuid())
  organizationId                     String
  planId                             String
  status                             SubscriptionStatus                   @default(ACTIVE)
  quantity                           Int                                  @default(1)
  startDate                          DateTime                             @default(now())
  endDate                            DateTime?
  currentPeriodStart                 DateTime?
  currentPeriodEnd                   DateTime?
  trialEndsAt                        DateTime?
  cancelAtPeriodEnd                  Boolean                              @default(false)
  canceledAt                         DateTime?
  cancellationReason                 String?
  isPaused                           Boolean                              @default(false)
  pausedAt                           DateTime?
  resumesAt                          DateTime?
  pauseReason                        String?
  lastBillingDate                    DateTime?
  nextBillingDate                    DateTime?
  stripeSubscriptionId               String?                              @unique
  stripeCustomerId                   String?
  metadata                           Json?                                @default("{}")
  createdAt                          DateTime                             @default(now())
  updatedAt                          DateTime                             @updatedAt
  couponId                           String?
  currency                           String                               @default("USD")
  isSuspended                        Boolean                              @default(false)
  suspendedAt                        DateTime?
  userId                             String?
  DunningLog                         DunningLog[]
  PaymentAttempt                     PaymentAttempt[]
  UsageAlert                         UsageAlert[]
  UsageCharge                        UsageCharge[]
  UsageRecord                        UsageRecord[]
  pause_history                      pause_history[]
  promotion_redemptions              promotion_redemptions[]
  subscription_cancellation_feedback subscription_cancellation_feedback[]
  coupons                            coupons?                             @relation(fields: [couponId], references: [id])
  Currency                           Currency                             @relation(fields: [currency], references: [currency_code])
  organization                       Organization                         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  PricingPlan                        PricingPlan                          @relation(fields: [planId], references: [id])
  users                              User?                                @relation(fields: [userId], references: [id])
  usage_notifications                usage_notifications[]
  win_back_campaigns                 win_back_campaigns[]
  transactions                       Transaction[]
  billingAttempts                    BillingAttempt[]

  @@index([organizationId])
  @@index([status])
  @@map("subscriptions")
}

model Invoice {
  id               String             @id @default(cuid())
  organizationId   String
  customerId       String
  number           String
  status           String
  dueDate          DateTime
  subtotal         Float
  total            Float
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  currency         String             @default("USD")
  exchangeRate     Float?
  lastPaymentError String?
  metadata         Json?
  userId           String?
  paymentMethodId  String?
  CreditAdjustment CreditAdjustment[]
  CreditNote       CreditNote[]
  DunningLog       DunningLog[]
  InvoiceTaxRate   InvoiceTaxRate[]
  PaymentAttempt   PaymentAttempt[]
  taxes            InvoiceTax[]
  transactions     Transaction[]
  billingAttempts  BillingAttempt[]
  Currency         Currency           @relation(fields: [currency], references: [currency_code])
  customer         Customer           @relation(fields: [customerId], references: [id], onDelete: Cascade)
  organization     Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  paymentMethod   PaymentMethod?     @relation(fields: [paymentMethodId], references: [id])
  users            User?              @relation(fields: [userId], references: [id])

  @@unique([organizationId, number])
  @@index([paymentMethodId])
  @@map("invoices")
}

model InvoiceTax {
  id        String   @id @default(cuid())
  invoiceId String
  taxRateId String
  amount    Float
  isExempt  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  taxRate   TaxRate  @relation(fields: [taxRateId], references: [id], onDelete: Cascade)

  @@unique([invoiceId, taxRateId])
  @@map("invoice_taxes")
}

model Alert {
  id         String    @id
  timestamp  DateTime  @default(now())
  type       String
  severity   String
  message    String
  metadata   Json?
  resolved   Boolean   @default(false)
  resolvedAt DateTime?

  @@index([resolved])
  @@index([severity])
  @@index([timestamp])
}

model BillingAuditLog {
  id        String   @id
  userId    String
  eventType String
  metadata  Json
  timestamp DateTime @default(now())
  users     User     @relation(fields: [userId], references: [id])
}

model CommunicationPrefs {
  id        String   @id
  userId    String   @unique
  email     Boolean  @default(true)
  sms       Boolean  @default(false)
  inApp     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime
  users     User[]
}

model CreditAdjustment {
  id             String               @id
  customerId     String
  organizationId String
  amount         Int
  type           CreditAdjustmentType
  description    String
  reason         String?
  invoiceId      String?
  adjustedById   String
  metadata       Json?                @default("{}")
  createdAt      DateTime             @default(now())
  updatedAt      DateTime
  users          User                 @relation(fields: [adjustedById], references: [id])
  customers      Customer             @relation(fields: [customerId], references: [id])
  invoices       Invoice?             @relation(fields: [invoiceId], references: [id])
  organizations  Organization         @relation(fields: [organizationId], references: [id])

  @@index([customerId])
  @@index([invoiceId])
  @@index([organizationId])
}

model CreditNote {
  id             String       @id
  number         String       @unique
  invoiceId      String
  organizationId String
  amount         Int
  taxAmount      Int          @default(0)
  totalAmount    Int
  currency       String       @default("USD")
  status         String       @default("ISSUED")
  notes          String?
  issuedAt       DateTime     @default(now())
  refundedAt     DateTime?
  metadata       Json?        @default("{}")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime
  invoices       Invoice      @relation(fields: [invoiceId], references: [id])
  organizations  Organization @relation(fields: [organizationId], references: [id])

  @@index([invoiceId])
  @@index([organizationId])
}

model Currency {
  currency_code  String           @id
  name           String
  symbol         String
  decimalPlaces  Int              @default(2)
  isDefault      Boolean          @default(false)
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  PaymentAttempt PaymentAttempt[]
  PricingPlan    PricingPlan[]
  UsageCharge    UsageCharge[]
  customers      Customer[]
  invoices       Invoice[]
  subscriptions  Subscription[]
}

model DataPrivacyRequest {
  id         String                 @id
  userId     String
  type       DataPrivacyRequestType
  regulation DataPrivacyRegulation
  status     String                 @default("PENDING")
  metadata   Json                   @default("{}")
  createdAt  DateTime               @default(now())
  updatedAt  DateTime
  users      User                   @relation(fields: [userId], references: [id])
}

model DunningConfig {
  id             String       @id
  organizationId String
  name           String
  description    String?
  isActive       Boolean      @default(false)
  stepsJson      String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime
  organizations  Organization @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, name])
  @@index([organizationId])
}

model DunningLog {
  id             String       @id
  subscriptionId String
  invoiceId      String?
  customerId     String
  daysPastDue    Int
  actions        String[]
  status         String
  metadata       Json?        @default("{}")
  createdAt      DateTime     @default(now())
  customers      Customer     @relation(fields: [customerId], references: [id])
  invoices       Invoice?     @relation(fields: [invoiceId], references: [id])
  subscriptions  Subscription @relation(fields: [subscriptionId], references: [id])

  @@index([createdAt])
  @@index([customerId])
  @@index([invoiceId])
  @@index([subscriptionId])
}

model ExchangeRate {
  id           String   @id
  fromCurrency String
  toCurrency   String
  rate         Float
  provider     String   @default("internal")
  lastUpdated  DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime

  @@unique([fromCurrency, toCurrency])
  @@index([lastUpdated])
}

model Feature {
  id                     String                   @id
  name                   String
  code                   String                   @unique
  description            String?
  unitLabel              String?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime
  categoryId             String?
  feature_categories     feature_categories?      @relation(fields: [categoryId], references: [id])
  PlanFeatureAssociation PlanFeatureAssociation[]
  PricingRule            PricingRule[]
  UsageAlert             UsageAlert[]
  UsageCharge            UsageCharge[]
  UsageLimit             UsageLimit[]
  UsageRecord            UsageRecord[]
  usage_notifications    usage_notifications[]

  @@index([categoryId])
}

model HealthCheck {
  id        String   @id
  timestamp DateTime @default(now())
  name      String
  status    String
  message   String?
  metadata  Json?

  @@index([status])
  @@index([timestamp])
}

model InvoiceTaxRate {
  id        String  @id
  invoiceId String
  taxRateId String
  amount    Float
  invoices  Invoice @relation(fields: [invoiceId], references: [id])
  TaxRate   TaxRate @relation(fields: [taxRateId], references: [id])

  @@index([invoiceId])
  @@index([taxRateId])
}

model Locale {
  code      String     @id
  name      String
  isDefault Boolean    @default(false)
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime
  customers Customer[]
}

model OrganizationSettings {
  id                   String       @id
  organizationId       String       @unique
  defaultCurrency      String       @default("USD")
  defaultLanguage      String       @default("en-US")
  defaultTaxBehavior   String       @default("exclusive")
  priceDisplaySettings Json?
  taxSettings          Json?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime
  organizations        Organization @relation(fields: [organizationId], references: [id])
}

model PaymentAttempt {
  id             String       @id
  subscriptionId String
  invoiceId      String?
  amount         Float
  currency       String       @default("USD")
  status         String
  failureCode    String?
  failureMessage String?
  scheduledFor   DateTime?
  processedAt    DateTime?
  metadata       Json?        @default("{}")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime
  currencyCode   String?
  Currency       Currency?    @relation(fields: [currencyCode], references: [currency_code])
  invoices       Invoice?     @relation(fields: [invoiceId], references: [id])
  subscriptions  Subscription @relation(fields: [subscriptionId], references: [id])

  @@index([invoiceId])
  @@index([scheduledFor])
  @@index([status])
  @@index([subscriptionId])
}

model PerformanceMetrics {
  id        String   @id
  timestamp DateTime @default(now())
  requests  Json
  database  Json
  cache     Json
  external  Json

  @@index([timestamp])
}

model PlanFeature {
  id               String             @id
  name             String
  description      String?
  unitName         String?
  isHighlighted    Boolean            @default(false)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  PromotionFeature PromotionFeature[]
  usage_tiers      usage_tiers[]
}

model PlanFeatureAssociation {
  id          String      @id
  planId      String
  featureId   String
  limits      Json?       @default("{}")
  Feature     Feature     @relation(fields: [featureId], references: [id], onDelete: Cascade)
  PricingPlan PricingPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@unique([planId, featureId])
}

model PricingPlan {
  id                     String                   @id
  name                   String
  description            String?
  pricingType            String                   @default("flat")
  basePrice              Int                      @default(0)
  currency               String                   @default("USD")
  billingInterval        String                   @default("monthly")
  trialDays              Int                      @default(0)
  sortOrder              Int                      @default(0)
  isActive               Boolean                  @default(true)
  isPublic               Boolean                  @default(true)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime
  PlanFeatureAssociation PlanFeatureAssociation[]
  Currency               Currency                 @relation(fields: [currency], references: [currency_code])
  PricingRule            PricingRule[]
  PricingTier            PricingTier[]
  PromotionPlan          PromotionPlan[]
  subscriptions          Subscription[]
}

model PricingPromotion {
  id                    String                  @id
  code                  String                  @unique
  name                  String
  description           String?
  discountType          String                  @default("percentage")
  discountValue         Int
  maxRedemptions        Int?
  timesRedeemed         Int                     @default(0)
  startDate             DateTime?
  endDate               DateTime?
  isActive              Boolean                 @default(true)
  isStackable           Boolean                 @default(false)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime
  PromotionFeature      PromotionFeature[]
  PromotionPlan         PromotionPlan[]
  promotion_redemptions promotion_redemptions[]
}

model PricingRule {
  id               String      @id
  planId           String
  featureId        String
  type             String
  unitAmount       Float
  currency         String      @default("USD")
  meteredAggregate String?
  tiersJson        String?
  freeQuantity     Float?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime
  Feature          Feature     @relation(fields: [featureId], references: [id])
  PricingPlan      PricingPlan @relation(fields: [planId], references: [id])

  @@unique([planId, featureId])
}

model PricingTier {
  id          String      @id
  planId      String
  upTo        Int?
  price       Int?
  flatFee     Int?
  perUnitFee  Int?
  infinite    Boolean     @default(false)
  PricingPlan PricingPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
}

model PromotionFeature {
  id               String           @id
  promotionId      String
  featureId        String
  PlanFeature      PlanFeature      @relation(fields: [featureId], references: [id], onDelete: Cascade)
  PricingPromotion PricingPromotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)

  @@unique([promotionId, featureId])
}

model PromotionPlan {
  id               String           @id
  promotionId      String
  planId           String
  PricingPlan      PricingPlan      @relation(fields: [planId], references: [id], onDelete: Cascade)
  PricingPromotion PricingPromotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)

  @@unique([promotionId, planId])
}

model SecurityAlert {
  id        String                @id
  type      String
  severity  SecurityEventSeverity
  message   String
  metadata  Json
  status    SecurityAlertStatus   @default(OPEN)
  timestamp DateTime              @default(now())
  updatedAt DateTime
}

model SecurityEvent {
  id        String                @id
  type      String
  severity  SecurityEventSeverity
  metadata  Json
  timestamp DateTime              @default(now())
}

model SubscriptionPlan {
  id            String   @id
  name          String
  description   String
  price         Float
  interval      String
  features      String[]
  stripePriceId String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime
}

model SystemMetrics {
  id        String   @id
  timestamp DateTime @default(now())
  cpu       Json
  memory    Json
  disk      Json
  network   Json

  @@index([timestamp])
}

model TaxExemption {
  id                String       @id
  organizationId    String
  taxRateId         String
  certificateNumber String?
  certificateUrl    String?
  validUntil        DateTime?
  reason            String?
  isActive          Boolean      @default(true)
  createdAt         DateTime     @default(now())
  revokedAt         DateTime?
  revocationReason  String?
  customerId        String?
  customers         Customer?    @relation(fields: [customerId], references: [id])
  organizations     Organization @relation(fields: [organizationId], references: [id])
  TaxRate           TaxRate      @relation(fields: [taxRateId], references: [id])

  @@index([organizationId])
  @@index([taxRateId])
}

model TaxIdValidation {
  id              String   @id
  taxId           String
  countryCode     String
  type            TaxType
  isValid         Boolean
  businessName    String?
  businessAddress String?
  validatedAt     DateTime
  validUntil      DateTime
  metadata        Json?

  @@index([taxId, countryCode, type])
}

model TaxRate {
  id             String           @id
  name           String
  description    String?
  rate           Float
  type           TaxType
  country        String
  state          String?
  city           String?
  isActive       Boolean          @default(true)
  organizationId String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  stripeId       String?
  InvoiceTaxRate InvoiceTaxRate[]
  TaxExemption   TaxExemption[]
  organizations  Organization     @relation(fields: [organizationId], references: [id])
  TaxRateHistory TaxRateHistory[]
  TaxRule        TaxRule[]
  invoiceTaxes   InvoiceTax[]

  @@index([country, state, city])
  @@index([organizationId])
  @@map("tax_rates")
}

model TaxRateHistory {
  id          String   @id
  taxRateId   String
  name        String
  rate        Float
  country     String
  state       String?
  city        String?
  description String?
  isActive    Boolean  @default(true)
  changedBy   String
  changedAt   DateTime @default(now())
  reason      String?
  users       User     @relation(fields: [changedBy], references: [id])
  TaxRate     TaxRate  @relation(fields: [taxRateId], references: [id], onDelete: Cascade)

  @@index([changedAt])
  @@index([taxRateId])
  @@map("tax_rate_history")
}

model TaxRule {
  id             String       @id
  name           String
  description    String?
  type           TaxRuleType
  priority       Int
  conditions     Json
  modifier       Float?
  override       Float?
  countryCode    String
  stateCode      String?
  isActive       Boolean      @default(true)
  organizationId String
  taxRateId      String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime
  organizations  Organization @relation(fields: [organizationId], references: [id])
  TaxRate        TaxRate      @relation(fields: [taxRateId], references: [id])

  @@index([organizationId])
  @@index([taxRateId])
}

model Translation {
  id        String   @id
  key       String
  value     String
  namespace String
  locale    String
  createdAt DateTime @default(now())
  updatedAt DateTime

  @@unique([key, locale, namespace])
  @@index([namespace, locale])
}

model Usage {
  id             String   @id
  subscriptionId String   @unique
  usageAmount    Float    @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime
}

model UsageAlert {
  id             String                @id
  subscriptionId String
  featureId      String
  threshold      Float
  type           UsageAlertType
  notifyVia      NotificationChannel[]
  enabled        Boolean               @default(true)
  lastTriggered  DateTime?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime
  Feature        Feature               @relation(fields: [featureId], references: [id])
  subscriptions  Subscription          @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([featureId])
  @@index([subscriptionId])
}

model UsageCharge {
  id                 String       @id
  subscriptionId     String
  featureId          String
  billingPeriodStart DateTime
  billingPeriodEnd   DateTime
  amount             Float
  quantity           Float
  currency           String       @default("USD")
  status             String
  invoiceId          String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime
  currencyCode       String?
  Currency           Currency?    @relation(fields: [currencyCode], references: [currency_code])
  Feature            Feature      @relation(fields: [featureId], references: [id])
  subscriptions      Subscription @relation(fields: [subscriptionId], references: [id])

  @@unique([subscriptionId, featureId, billingPeriodStart])
  @@index([subscriptionId, status])
}

model UsageLimit {
  id             String   @id
  customerId     String
  featureId      String
  limit          Float
  alertThreshold Float?
  alertSent      Boolean  @default(false)
  resetPeriod    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  customers      Customer @relation(fields: [customerId], references: [id])
  Feature        Feature  @relation(fields: [featureId], references: [id])

  @@unique([customerId, featureId])
}

model UsageRecord {
  id             String       @id
  customerId     String
  featureId      String
  quantity       Float
  timestamp      DateTime     @default(now())
  metadataJson   String?
  createdAt      DateTime     @default(now())
  organizationId String
  subscriptionId String
  userId         String
  customers      Customer     @relation(fields: [customerId], references: [id])
  Feature        Feature      @relation(fields: [featureId], references: [id])
  organizations  Organization @relation(fields: [organizationId], references: [id])
  subscriptions  Subscription @relation(fields: [subscriptionId], references: [id])
  users          User         @relation(fields: [userId], references: [id])

  @@index([customerId, featureId, timestamp])
  @@index([featureId, timestamp])
  @@index([organizationId])
  @@index([subscriptionId])
  @@index([userId])
}

model UserPreference {
  id        String   @id
  userId    String   @unique
  currency  String   @default("USD")
  locale    String   @default("en-US")
  timezone  String   @default("UTC")
  createdAt DateTime @default(now())
  updatedAt DateTime
  users     User     @relation(fields: [userId], references: [id])
}

model UserPreferences {
  id             String   @id
  userId         String   @unique
  language       String   @default("en")
  dateFormat     String   @default("long")
  numberFormat   String   @default("standard")
  currencyFormat String   @default("symbol")
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  users          User     @relation(fields: [userId], references: [id])
}

model accounts {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  id_token          String?
  session_state     String?
  users             User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model coupons {
  id              String         @id
  code            String         @unique
  description     String?
  discountType    String
  discountAmount  Float
  currency        String?
  maxRedemptions  Int?
  redemptionCount Int            @default(0)
  startsAt        DateTime       @default(now())
  expiresAt       DateTime?
  metadata        String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime
  promotionId     String?
  promotions      promotions?    @relation(fields: [promotionId], references: [id])
  subscriptions   Subscription[]

  @@index([code])
}

model events {
  id             String        @id
  eventType      String
  resourceType   String
  resourceId     String
  organizationId String?
  userId         String?
  metadata       Json?         @default("{}")
  severity       String        @default("INFO")
  timestamp      DateTime      @default(now())
  organizations  Organization? @relation(fields: [organizationId], references: [id])
  users          User?         @relation(fields: [userId], references: [id])

  @@index([eventType])
  @@index([organizationId])
  @@index([resourceType, resourceId])
  @@index([timestamp])
  @@index([userId])
}

model feature_categories {
  id          String    @id
  name        String
  description String?
  code        String    @unique
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  Feature     Feature[]

  @@index([code])
}

model notifications {
  id             String           @id
  userId         String?
  organizationId String?
  title          String
  message        String
  type           NotificationType
  read           Boolean          @default(false)
  data           Json?            @default("{}")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  organizations  Organization?    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  users          User?            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([organizationId])
  @@index([read])
  @@index([userId])
}

model one_time_payments {
  id             String        @id
  organizationId String
  amount         Int
  currency       String        @default("USD")
  description    String
  status         PaymentStatus
  paymentMethod  String?
  stripeId       String?       @unique
  invoiceId      String?
  metadata       Json?         @default("{}")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  organizations  Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([organizationId])
  @@index([status])
}

model pause_history {
  id             String       @id
  subscriptionId String
  pausedAt       DateTime     @default(now())
  resumesAt      DateTime
  resumedAt      DateTime?
  reason         String?
  createdAt      DateTime     @default(now())
  subscriptions  Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
}

model processed_webhook_events {
  eventId     String   @id
  eventType   String
  processedAt DateTime @default(now())

  @@index([eventType])
  @@index([processedAt])
}

model products {
  id          String   @id
  name        String
  description String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  metadata    Json?    @default("{}")
  stripeId    String?  @unique
}

model promotion_redemptions {
  id               String           @id
  promotionId      String
  subscriptionId   String
  redeemedAt       DateTime         @default(now())
  metadata         Json?            @default("{}")
  PricingPromotion PricingPromotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  subscriptions    Subscription     @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@unique([promotionId, subscriptionId])
  @@index([promotionId])
  @@index([subscriptionId])
}

model promotions {
  id              String       @id
  name            String
  description     String?
  discountType    DiscountType
  discountAmount  Int
  currency        String       @default("USD")
  active          Boolean      @default(true)
  startDate       DateTime     @default(now())
  endDate         DateTime?
  maxRedemptions  Int?
  redemptionCount Int          @default(0)
  applicablePlans String[]
  stripeId        String?      @unique
  createdAt       DateTime     @default(now())
  updatedAt       DateTime
  metadata        Json?        @default("{}")
  coupons         coupons[]

  @@index([active])
  @@index([startDate, endDate])
}

model scheduled_emails {
  id             String       @id
  organizationId String
  template       String
  scheduledFor   DateTime
  data           Json
  sent           Boolean      @default(false)
  sentAt         DateTime?
  error          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime
  organizations  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([scheduledFor])
}

model sessions {
  id                String   @id
  sessionToken      String   @unique
  userId            String
  expires           DateTime
  twoFactorVerified Boolean  @default(false)
  users             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model subscription_cancellation_feedback {
  id                 String       @id
  subscriptionId     String
  reason             String
  additionalFeedback String?
  timestamp          DateTime     @default(now())
  createdAt          DateTime     @default(now())
  updatedAt          DateTime
  subscriptions      Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
}

model tax_report_cache {
  id             String       @id
  organizationId String
  periodStart    DateTime
  periodEnd      DateTime
  report         Json
  createdAt      DateTime     @default(now())
  updatedAt      DateTime
  organizations  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([periodStart, periodEnd])
}

model usage_notifications {
  id             String       @id
  subscriptionId String
  featureId      String
  threshold      Float
  usage          Float
  limit          Float
  percentUsed    Float
  createdAt      DateTime     @default(now())
  Feature        Feature      @relation(fields: [featureId], references: [id], onDelete: Cascade)
  subscriptions  Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([featureId])
  @@index([subscriptionId])
}

model usage_tiers {
  id            String      @id
  featureId     String
  startQuantity Int
  endQuantity   Int?
  price         Int
  PlanFeature   PlanFeature @relation(fields: [featureId], references: [id], onDelete: Cascade)

  @@index([featureId])
}

model verification_tokens {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model webhook_deliveries {
  id                String            @id
  webhookEndpointId String
  eventType         String
  payload           Json
  status            String
  statusCode        Int?
  response          Json?
  retryCount        Int               @default(0)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime
  webhook_endpoints webhook_endpoints @relation(fields: [webhookEndpointId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([status])
  @@index([webhookEndpointId])
}

model webhook_endpoints {
  id                 String               @id
  organizationId     String
  url                String
  secret             String
  description        String?
  eventTypes         String[]
  isActive           Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  webhook_deliveries webhook_deliveries[]
  organizations      Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
}

model win_back_campaigns {
  id             String       @id
  subscriptionId String
  organizationId String
  reason         String
  offer          Json
  status         String       @default("PENDING")
  validUntil     DateTime
  acceptedAt     DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime
  organizations  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  subscriptions  Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([subscriptionId])
}

model PaymentMethod {
  id              String        @id @default(cuid())
  organizationId  String
  customerId      String
  type            String        // e.g., 'card', 'bank_account'
  provider        String        // e.g., 'stripe'
  providerMethodId String       // ID from the payment provider
  last4           String?       // Last 4 digits of card/account
  expiryMonth     Int?         // For cards
  expiryYear      Int?         // For cards
  brand           String?       // For cards (visa, mastercard, etc.)
  isDefault       Boolean       @default(false)
  status          String        @default("active") // active, expired, canceled
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  customer        Customer      @relation(fields: [customerId], references: [id])
  organization    Organization  @relation(fields: [organizationId], references: [id])
  invoices        Invoice[]
  transactions    Transaction[]

  @@index([organizationId])
  @@index([customerId])
}

model Transaction {
  id              String           @id @default(cuid())
  customerId      String
  invoiceId       String?
  subscriptionId  String?
  amount          Float
  currency        String           @default("USD")
  type            TransactionType
  status          TransactionStatus @default(PENDING)
  paymentMethodId String?
  paymentIntentId String?
  description     String?
  metadata        Json?
  createdAt       DateTime         @default(now())
  customer        Customer         @relation(fields: [customerId], references: [id])
  invoice         Invoice?         @relation(fields: [invoiceId], references: [id])
  subscription    Subscription?    @relation(fields: [subscriptionId], references: [id])
  paymentMethod   PaymentMethod?   @relation(fields: [paymentMethodId], references: [id])

  @@index([customerId])
  @@index([invoiceId])
  @@index([subscriptionId])
  @@index([paymentMethodId])
}

model BillingAttempt {
  id             String    @id @default(cuid())
  subscriptionId String
  invoiceId      String?
  status         BillingAttemptStatus
  errorMessage   String?
  attemptedAt    DateTime
  createdAt      DateTime  @default(now())
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  invoice        Invoice?    @relation(fields: [invoiceId], references: [id])

  @@index([subscriptionId])
  @@index([invoiceId])
}

model WebhookEvent {
  id          String   @id @default(cuid())
  type        String
  payload     Json
  source      String   // e.g. "stripe", "hubspot"
  processed   Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model WebhookSubscription {
  id        String   @id @default(cuid())
  url       String
  event     String
  headers   Json?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
}

model ApiToken {
  id          String         @id @default(uuid())
  token       String         @unique
  userId      String
  scopes      String[]
  name        String
  expiresAt   DateTime
  lastUsedAt  DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  usageRecords ApiTokenUsage[]

  @@index([userId])
  @@index([token])
}

model ApiTokenUsage {
  id          String    @id @default(cuid())
  tokenId     String
  endpoint    String
  method      String
  statusCode  Int
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime  @default(now())
  responseTime Int?     // in milliseconds
  token       ApiToken  @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  @@index([tokenId])
  @@index([timestamp])
  @@index([endpoint])
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String
  action      String
  targetId    String?
  description String
  metadata    Json?    @default("{}")
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  STAFF
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

enum CreditAdjustmentType {
  CREDIT
  DEBIT
  REFUND
  INVOICE_PAYMENT
}

enum CustomerType {
  INDIVIDUAL
  BUSINESS
}

enum DataPrivacyRegulation {
  GDPR
  CCPA
}

enum DataPrivacyRequestType {
  ACCESS
  DELETE
  MODIFY
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum NotificationChannel {
  EMAIL
  WEBHOOK
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}

enum OrganizationRole {
  OWNER
  ADMIN
  MEMBER
}

enum PaymentProvider {
  STRIPE
  PAYPAL
  BANK_TRANSFER
  OTHER
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
}

enum SecurityAlertStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  DISMISSED
}

enum SecurityEventSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum SubscriptionStatus {
  ACTIVE
  PAUSED
  TRIALING
  PAST_DUE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  UNPAID
  ENDED
}

enum TaxRuleType {
  MODIFIER
  OVERRIDE
}

enum TaxType {
  VAT
  GST
  HST
  PST
  SALES_TAX
}

enum UsageAlertType {
  PERCENTAGE
  ABSOLUTE
}

enum InvoiceStatus {
  DRAFT
  OPEN
  PAID
  UNCOLLECTIBLE
  VOID
}

enum TransactionType {
  CHARGE
  REFUND
  CREDIT
}

enum TransactionStatus {
  PENDING
  SUCCEEDED
  FAILED
}

enum BillingAttemptStatus {
  SUCCEEDED
  FAILED
  PENDING
}
