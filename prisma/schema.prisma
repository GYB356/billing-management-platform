generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
<<<<<<< HEAD
  id                  String             @id @default(cuid())
  name                String?
  email               String             @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  role                UserRole           @default(USER)
  status              UserStatus         @default(ACTIVE)
  twoFactorEnabled    Boolean            @default(false)
  twoFactorSecret     String?
  backupCodes         String[]           @default([])
  lastLoginAt         DateTime?
  failedLoginAttempts Int                @default(0)
  lockedUntil         DateTime?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  userOrganizations   UserOrganization[]
  accounts            Account[]
  sessions            Session[]
  notifications       Notification[]
  preferences         UserPreference[]
  preferences2        UserPreferences[]
  usageRecords        UsageRecord[]
  taxRateHistory      TaxRateHistory[]
  events              Event[]

  @@index([email])
  @@map("users")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  STAFF
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

// NextAuth required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id                String   @id @default(cuid())
  sessionToken      String   @unique
  userId            String
  expires           DateTime
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  twoFactorVerified Boolean  @default(false)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Organization model
model Organization {
  id                String             @id @default(cuid())
  name              String
  email             String?            @unique
  phone             String?
  address           String?
  city              String?
  state             String?
  country           String?
  postalCode        String?
  taxId             String?
  settings          Json?              @default("{}")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  stripeCustomerId  String?            @unique
  userOrganizations UserOrganization[]
  subscriptions     Subscription[]
  invoices          Invoice[]
  taxRates          TaxRate[]
  taxExemptions     TaxExemption[]
  customers         Customer[]
  notifications     Notification[]
  usageRecords      UsageRecord[]
  taxReportCache    TaxReportCache[]
  oneTimePayments   OneTimePayment[]
  webhookEndpoints  WebhookEndpoint[]
  events            Event[]

  @@map("organizations")
}

model UserOrganization {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([userId, organizationId])
  @@map("user_organizations")
}

enum OrganizationRole {
  OWNER
  ADMIN
  MEMBER
}

// Products and pricing
model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  metadata    Json?    @default("{}")
  stripeId    String?  @unique

  @@map("products")
}

// Pricing models
model PricingPlan {
  id              String   @id @default(cuid())
  name            String
  description     String?
  pricingType     String   @default("flat") // flat, per_user, tiered, usage_based
  basePrice       Int      @default(0) // Price in cents
  currency        String   @default("USD")
  billingInterval String   @default("monthly") // monthly, quarterly, annual, custom
  trialDays       Int      @default(0)
  sortOrder       Int      @default(0)
  isActive        Boolean  @default(true)
  isPublic        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  tiers          PricingTier[]
  planFeatures   PlanFeatureAssociation[]
  subscriptions  Subscription[]
  promotionPlans PromotionPlan[]
  pricingRules   PricingRule[]
  currencyRelation Currency? @relation(fields: [currency], references: [code])
}

model PricingTier {
  id         String  @id @default(cuid())
  planId     String
  upTo       Int? // null means unlimited
  price      Int? // Price in cents
  flatFee    Int? // Flat fee in cents
  perUnitFee Int? // Per unit fee in cents
  infinite   Boolean @default(false) // Whether this tier has no upper limit

  // Relations
  plan PricingPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
}

model PlanFeature {
  id            String   @id @default(cuid())
  name          String
  description   String?
  unitName      String? // For metered features (e.g., "users", "API calls")
  isHighlighted Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  promotionFeatures PromotionFeature[]
  usageTiers        UsageTier[]
}

model FeatureCategory {
  id          String   @id @default(cuid())
  name        String
  description String?
  code        String   @unique
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  features Feature[]

  @@index([code])
  @@map("feature_categories")
}

model Feature {
  id             String           @id @default(uuid())
  name           String
  code           String           @unique
  description    String?
  unitLabel      String?          // e.g. "API calls", "GB", "users"
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  pricingRules   PricingRule[]
  usageRecords   UsageRecord[]
  usageCharges   UsageCharge[]
  usageLimits    UsageLimit[]
}

model PlanFeatureAssociation {
  id        String @id @default(cuid())
  planId    String
  featureId String
  limits    Json?  @default("{}") // Store limits as JSON with structure like {maxValue: number, action: string}

  // Relations
  plan    PricingPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  feature Feature     @relation(fields: [featureId], references: [id], onDelete: Cascade)

  // Indexes
  @@unique([planId, featureId])
}

model PricingPromotion {
  id             String    @id @default(cuid())
  code           String    @unique
  name           String
  description    String?
  discountType   String    @default("percentage") // percentage, fixed, free_trial
  discountValue  Int // Percentage or amount in cents
  maxRedemptions Int? // null for unlimited
  timesRedeemed  Int       @default(0)
  startDate      DateTime?
  endDate        DateTime?
  isActive       Boolean   @default(true)
  isStackable    Boolean   @default(false) // Whether can be combined with other promotions
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  promotionPlans    PromotionPlan[]
  promotionFeatures PromotionFeature[]
  redemptions       PromotionRedemption[]
}

model PromotionPlan {
  id          String @id @default(cuid())
  promotionId String
  planId      String

  // Relations
  promotion PricingPromotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  plan      PricingPlan      @relation(fields: [planId], references: [id], onDelete: Cascade)

  // Indexes
  @@unique([promotionId, planId])
}

model PromotionFeature {
  id          String @id @default(cuid())
  promotionId String
  featureId   String

  // Relations
  promotion PricingPromotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  feature   PlanFeature      @relation(fields: [featureId], references: [id], onDelete: Cascade)

  // Indexes
  @@unique([promotionId, featureId])
}

model PromotionRedemption {
  id             String   @id @default(cuid())
  promotionId    String
  subscriptionId String
  redeemedAt     DateTime @default(now())
  metadata       Json?    @default("{}")

  // Relations
  promotion    PricingPromotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  subscription Subscription     @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@unique([promotionId, subscriptionId])
  @@index([promotionId])
  @@index([subscriptionId])
  @@map("promotion_redemptions")
}

model Customer {
  id             String         @id @default(cuid())
  organizationId String
  name           String
  email          String?
  phone          String?
  address        String?
  city           String?
  state          String?
  country        String?
  postalCode     String?
  taxId          String?
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invoices       Invoice[]
  taxExemptions  TaxExemption[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  usageRecords   UsageRecord[]
  usageLimits    UsageLimit[]
  dunningLogs    DunningLog[]
  preferredCurrency String?
  currency          Currency?   @relation(fields: [preferredCurrency], references: [code])
  preferredLocale   String?
  locale            Locale?     @relation(fields: [preferredLocale], references: [code])

  @@unique([organizationId, email])
  @@map("customers")
}

model Subscription {
  id                   String             @id @default(cuid())
  organizationId       String
  planId               String
  status               SubscriptionStatus @default(ACTIVE)
  quantity             Int                @default(1)
  startDate            DateTime           @default(now())
  endDate              DateTime?
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  trialEndsAt          DateTime?
  cancelAtPeriodEnd    Boolean            @default(false)
  canceledAt           DateTime?
  cancellationReason   String?
  isPaused             Boolean            @default(false)
  pausedAt             DateTime?
  resumesAt            DateTime?
  pauseReason          String?
  lastBillingDate      DateTime?
  nextBillingDate      DateTime?
  stripeSubscriptionId String?            @unique
  stripeCustomerId     String?
  metadata             Json?              @default("{}")
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  couponId             String?
  coupon               Coupon?            @relation(fields: [couponId], references: [id])
  currency             String             @default("USD")
  currencyRelation     Currency?          @relation(fields: [currency], references: [code])

  // Relations
  organization         Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  plan                 PricingPlan           @relation(fields: [planId], references: [id])
  promotionRedemptions PromotionRedemption[]
  pauseHistory         PauseHistory[]
  usageRecords         UsageRecord[]
  usageNotifications   UsageNotification[]
  usageCharges         UsageCharge[]
  dunningLogs          DunningLog[]
  paymentAttempts      PaymentAttempt[]

  @@index([organizationId])
  @@index([status])
  @@map("subscriptions")
}

enum SubscriptionStatus {
  ACTIVE
  PAUSED
  TRIALING
  PAST_DUE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  UNPAID
  ENDED
}

model PauseHistory {
  id             String       @id @default(cuid())
  subscriptionId String
  pausedAt       DateTime     @default(now())
  resumesAt      DateTime
  resumedAt      DateTime?
  reason         String?
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())

  @@index([subscriptionId])
  @@map("pause_history")
}

model Invoice {
  id             String       @id @default(cuid())
  organizationId String
  customerId     String
  number         String
  status         String
  dueDate        DateTime
  subtotal       Float
  total          Float
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  customer       Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  taxes          InvoiceTax[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  dunningLogs    DunningLog[]
  paymentAttempts PaymentAttempt[]
  currency       String       @default("USD")
  currencyRelation Currency?  @relation(fields: [currency], references: [code])
  exchangeRate   Float?       // Exchange rate at the time of invoice creation

  @@unique([organizationId, number])
  @@map("invoices")
}

model TaxRate {
  id             String           @id @default(cuid())
  organizationId String
  name           String
  rate           Float
  country        String
  state          String?
  city           String?
  description    String?
  isActive       Boolean          @default(true)
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invoiceTaxes   InvoiceTax[]
  taxExemptions  TaxExemption[]
  history        TaxRateHistory[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@unique([organizationId, country, state, city])
  @@map("tax_rates")
}

model TaxRateHistory {
  id            String   @id @default(cuid())
  taxRateId     String
  name          String
  rate          Float
  country       String
  state         String?
  city          String?
  description   String?
  isActive      Boolean  @default(true)
  changedBy     String
  changedAt     DateTime @default(now())
  reason        String?
  taxRate       TaxRate  @relation(fields: [taxRateId], references: [id], onDelete: Cascade)
  changedByUser User?    @relation(fields: [changedBy], references: [id])

  @@index([taxRateId])
  @@index([changedAt])
}

model TaxExemption {
  id             String       @id @default(cuid())
  organizationId String
  customerId     String
  taxRateId      String
  startDate      DateTime
  endDate        DateTime?
  reason         String?
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  customer       Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  taxRate        TaxRate      @relation(fields: [taxRateId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([customerId, taxRateId])
  @@map("tax_exemptions")
}

model InvoiceTax {
  id        String   @id @default(cuid())
  invoiceId String
  taxRateId String
  amount    Float
  isExempt  Boolean  @default(false)
  invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  taxRate   TaxRate  @relation(fields: [taxRateId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([invoiceId, taxRateId])
  @@map("invoice_taxes")
}

model SubscriptionPlan {
  id            String   @id @default(cuid())
  name          String
  description   String
  price         Float
  interval      String // 'month' or 'year'
  features      String[]
  stripePriceId String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Notifications
model Notification {
  id             String           @id @default(cuid())
  userId         String?
  organizationId String?
  title          String
  message        String
  type           NotificationType
  read           Boolean          @default(false)
  data           Json?            @default("{}")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  user           User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization?    @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([organizationId])
  @@index([read])
  @@index([createdAt])
  @@map("notifications")
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}

// Webhook processing
model ProcessedWebhookEvent {
  eventId     String   @id
  eventType   String
  processedAt DateTime @default(now())

  @@index([eventType])
  @@index([processedAt])
  @@map("processed_webhook_events")
}

// Promotional pricing and discount management
model Promotion {
  id              String       @id @default(cuid())
  name            String
  description     String?
  discountType    DiscountType
  discountAmount  Int // Percentage or fixed amount in cents
  currency        String       @default("USD")
  active          Boolean      @default(true)
  startDate       DateTime     @default(now())
  endDate         DateTime?
  maxRedemptions  Int?
  redemptionCount Int          @default(0)
  applicablePlans String[] // Array of plan IDs this promotion applies to
  stripeId        String?      @unique
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  metadata        Json?        @default("{}")
  coupons         Coupon[]

  @@index([active])
  @@index([startDate, endDate])
  @@map("promotions")
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

model Coupon {
  id             String           @id @default(uuid())
  code           String           @unique
  description    String?
  discountType   String           // 'percentage', 'fixed_amount'
  discountAmount Float            // Either percentage or fixed amount
  currency       String?          // Required for fixed_amount
  maxRedemptions Int?             // Maximum number of redemptions
  redemptionCount Int             @default(0)
  startsAt       DateTime         @default(now())
  expiresAt      DateTime?
  metadata       String?          @db.Text // JSON string for additional metadata
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  subscriptions  Subscription[]   // Subscriptions that have applied this coupon

  @@index([code])
  @@index([promotionId])
  @@map("coupons")
}

// One-time payments
model OneTimePayment {
  id             String        @id @default(cuid())
  organizationId String
  amount         Int // In cents
  currency       String        @default("USD")
  description    String
  status         PaymentStatus
  paymentMethod  String?
  stripeId       String?       @unique
  invoiceId      String?
  metadata       Json?         @default("{}")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([status])
  @@index([createdAt])
  @@map("one_time_payments")
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
}

// Translation model for storing internationalization content
model Translation {
  id              String       @id @default(uuid())
  locale          String
  namespace       String       // e.g., "email", "invoice", "dashboard"
  key             String
  value           String       @db.Text
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@unique([locale, namespace, key])
  @@index([locale])
  @@index([namespace])
}

// User preferences model for storing user-specific settings
model UserPreference {
  id           String   @id @default(cuid())
  userId       String   @unique
  language     String? // Preferred language/locale
  dateFormat   String? // Preferred date format
  timeFormat   String? // Preferred time format
  numberFormat String? // Preferred number format
  timezone     String? // Preferred timezone
  currencyCode String? // Preferred currency
  theme        String? // UI theme preference
  notifyEmail  Boolean  @default(true) // Email notification preference
  notifyInApp  Boolean  @default(true) // In-app notification preference
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserPreferences {
  id             String   @id @default(cuid())
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id])
  language       String   @default("en")
  dateFormat     String   @default("long")
  numberFormat   String   @default("standard")
  currencyFormat String   @default("symbol")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// System metrics model
model SystemMetrics {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  cpu       Json // Stores CPU metrics
  memory    Json // Stores memory metrics
  disk      Json // Stores disk metrics
  network   Json // Stores network metrics

  @@index([timestamp])
}

// Performance metrics model
model PerformanceMetrics {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  requests  Json // Stores request metrics
  database  Json // Stores database metrics
  cache     Json // Stores cache metrics
  external  Json // Stores external service metrics

  @@index([timestamp])
}

// Health check model
model HealthCheck {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  name      String // Name of the health check
  status    String // healthy, degraded, or unhealthy
  message   String? // Optional message about the check
  metadata  Json? // Additional metadata about the check

  @@index([timestamp])
  @@index([status])
}

// Alert model
model Alert {
  id         String    @id @default(cuid())
  timestamp  DateTime  @default(now())
  type       String // Type of alert
  severity   String // INFO, WARNING, ERROR
  message    String // Alert message
  metadata   Json? // Additional metadata about the alert
  resolved   Boolean   @default(false)
  resolvedAt DateTime?

  @@index([timestamp])
  @@index([severity])
  @@index([resolved])
}

model UsageRecord {
  id             String           @id @default(uuid())
  customerId     String
  customer       Customer         @relation(fields: [customerId], references: [id])
  featureId      String
  feature        Feature          @relation(fields: [featureId], references: [id])
  quantity       Float
  timestamp      DateTime         @default(now())
  metadataJson   String?          @db.Text // JSON string for additional metadata
  createdAt      DateTime         @default(now())

  @@index([customerId, featureId, timestamp])
  @@index([featureId, timestamp])
}

model UsageTier {
  id            String      @id @default(cuid())
  featureId     String
  startQuantity Int
  endQuantity   Int?
  price         Int // Price in cents
  feature       PlanFeature @relation(fields: [featureId], references: [id], onDelete: Cascade)

  @@index([featureId])
  @@map("usage_tiers")
}

model TaxReportCache {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  periodStart    DateTime
  periodEnd      DateTime
  report         Json
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([organizationId])
  @@index([periodStart, periodEnd])
  @@map("tax_report_cache")
}

model UsageNotification {
  id             String   @id @default(cuid())
  subscriptionId String
  featureId      String
  threshold      Float // The percentage threshold that triggered this notification
  usage          Float // The usage amount at the time of notification
  limit          Float // The limit amount at the time of notification
  percentUsed    Float // The percentage of the limit used
  createdAt      DateTime @default(now())

  // Relations
  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  feature      Feature      @relation(fields: [featureId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
  @@index([featureId])
  @@index([createdAt])
  @@map("usage_notifications")
}

// Webhook models
model WebhookEndpoint {
  id              String            @id @default(cuid())
  organizationId  String
  url             String
  secret          String
  description     String?
  eventTypes      String[]
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  organization    Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  webhookDeliveries WebhookDelivery[]

  @@index([organizationId])
  @@map("webhook_endpoints")
}

model WebhookDelivery {
  id                String            @id @default(cuid())
  webhookEndpointId String
  eventType         String
  payload           Json
  status            String            // PENDING, DELIVERED, FAILED
  statusCode        Int?
  response          Json?
  retryCount        Int               @default(0)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  webhookEndpoint   WebhookEndpoint   @relation(fields: [webhookEndpointId], references: [id], onDelete: Cascade)

  @@index([webhookEndpointId])
  @@index([status])
  @@index([createdAt])
  @@map("webhook_deliveries")
}

// Event tracking system
model Event {
  id             String       @id @default(cuid())
  eventType      String
  resourceType   String
  resourceId     String
  organizationId String?
  userId         String?
  metadata       Json?        @default("{}")
  severity       String       @default("INFO")    // INFO, WARNING, ERROR, CRITICAL
  timestamp      DateTime     @default(now())
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  user           User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([eventType])
  @@index([resourceType, resourceId])
  @@index([organizationId])
  @@index([userId])
  @@index([timestamp])
  @@map("events")
}

model PricingRule {
  id             String           @id @default(uuid())
  planId         String
  plan           PricingPlan      @relation(fields: [planId], references: [id])
  featureId      String
  feature        Feature          @relation(fields: [featureId], references: [id])
  type           String           // 'metered', 'tiered', 'volume', 'flat_fee'
  unitAmount     Float            // The per-unit price
  currency       String           @default("USD")
  meteredAggregate String?        // 'sum', 'max', 'count' - how to aggregate metered usage
  tiersJson      String?          @db.Text // JSON string for pricing tiers
  freeQuantity   Float?           // Free units before charging starts
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@unique([planId, featureId])
}

model UsageCharge {
  id                   String     @id @default(uuid())
  subscriptionId       String
  subscription         Subscription @relation(fields: [subscriptionId], references: [id])
  featureId            String
  feature              Feature    @relation(fields: [featureId], references: [id])
  billingPeriodStart   DateTime
  billingPeriodEnd     DateTime
  amount               Float      // Calculated charge amount
  quantity             Float      // Total usage quantity
  currency             String     @default("USD")
  status               String     // 'pending', 'charged', 'canceled'
  invoiceId            String?    // Reference to invoice when charged
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt

  @@unique([subscriptionId, featureId, billingPeriodStart])
  @@index([subscriptionId, status])
}

model UsageLimit {
  id             String           @id @default(uuid())
  customerId     String
  customer       Customer         @relation(fields: [customerId], references: [id])
  featureId      String
  feature        Feature          @relation(fields: [featureId], references: [id])
  limit          Float            // Maximum allowed usage
  alertThreshold Float?           // Optional alert threshold (percentage)
  alertSent      Boolean          @default(false)
  resetPeriod    String?          // 'monthly', 'quarterly', 'annual', or null for no reset
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@unique([customerId, featureId])
}

// Dunning configuration
model DunningConfig {
  id          String    @id @default(uuid())
  name        String
  description String?
  isActive    Boolean   @default(false)
  stepsJson   String    @db.Text  // JSON string of dunning steps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Dunning logs
model DunningLog {
  id            String      @id @default(uuid())
  customerId    String
  customer      Customer    @relation(fields: [customerId], references: [id])
  subscriptionId String
  subscription  Subscription @relation(fields: [subscriptionId], references: [id])
  invoiceId     String?
  invoice       Invoice?    @relation(fields: [invoiceId], references: [id])
  stepNumber    Int
  action        String
  status        String      // 'pending', 'success', 'failed'
  notes         String?
  metadataJson  String?     @db.Text
  createdAt     DateTime    @default(now())

  @@index([customerId])
  @@index([subscriptionId])
  @@index([invoiceId])
  @@index([createdAt])
}

// Payment attempts for dunning
model PaymentAttempt {
  id               String      @id @default(uuid())
  subscriptionId   String
  subscription     Subscription @relation(fields: [subscriptionId], references: [id])
  invoiceId        String?
  invoice          Invoice?    @relation(fields: [invoiceId], references: [id])
  amount           Float
  currency         String
  status           String      // 'pending', 'succeeded', 'failed'
  failureCode      String?
  failureMessage   String?
  paymentMethodId  String?
  paymentMethod    PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  createdAt        DateTime    @default(now())

  @@index([subscriptionId])
  @@index([invoiceId])
  @@index([status])
  @@index([createdAt])
}

model PaymentMethod {
  id             String           @id @default(uuid())
  type           String           // 'card', 'bank_transfer', etc.
  details        Json             // JSON object with payment method details
  isDefault      Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  paymentAttempts PaymentAttempt[]
}

// Currency configuration
model Currency {
  code            String       @id @map("currency_code")
  name            String
  symbol          String
  decimalPlaces   Int          @default(2)
  isDefault       Boolean      @default(false)
  isActive        Boolean      @default(true)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // Relations
  plans           Plan[]
  invoices        Invoice[]
  usageCharges    UsageCharge[]
  paymentAttempts PaymentAttempt[]
  subscriptions   Subscription[]
  customers       Customer[]   // Default display currency for customers
}

// Exchange rates between currencies
model ExchangeRate {
  sourceCurrency  String
  targetCurrency  String
  rate            Float
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@id([sourceCurrency, targetCurrency])
  @@index([sourceCurrency])
  @@index([targetCurrency])
}

// Add locale model for language support
model Locale {
  code            String       @id // e.g., "en-US", "fr-FR", "de-DE"
  name            String       // e.g., "English (US)", "French", "German"
  isDefault       Boolean      @default(false)
  isActive        Boolean      @default(true)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // Relations
  customers       Customer[]
=======
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
>>>>>>> 58d4a3da7158e64e5700c51b28776197a8d974c9
}
